/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package uk.ac.uea.cmp.srnaworkbench.tools.vissr;

import uk.ac.uea.cmp.srnaworkbench.data.sequence.*;
import uk.ac.uea.cmp.srnaworkbench.io.GFFFileReader;
import uk.ac.uea.cmp.srnaworkbench.utils.*;

import java.io.File;
import java.util.*;

import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author prb07qmu
 */
final class GFFChooser extends javax.swing.JPanel
{
  private final Set<String> _sequenceIds = CollectionUtils.newHashSet();

  private final List<GFFRecord> _records = CollectionUtils.newArrayList();

  // These lists are populated when the GFF file is chosen
  private final List<String> _allTypes = CollectionUtils.newArrayList();
  private final List<String> _mainTypes = CollectionUtils.newArrayList();

  // These lists provide the data for the JLists
  private final List<String> _listLeft  = CollectionUtils.newArrayList();
  private final List<String> _listRight = CollectionUtils.newArrayList();

  /** Creates new form GFFChooser */
  public GFFChooser( List<SequenceRangeI> governingSequences )
  {
    initComponents();

    for ( SequenceRangeI sr : governingSequences )
    {
      _sequenceIds.add( sr.getSequenceId() );
    }
  }

  private GFFChooser( String sequenceId )
  {
    initComponents();
    _sequenceIds.add( sequenceId );
  }

  private void doChooseGFFFile()
  {
    // Choose the GFF file
    //
    FileNameExtensionFilter ff = new FileNameExtensionFilter("Annotations file in GFF format (.gff, .gff3)", "gff", "gff3");

    File gffFile = FileDialogUtils.showSingleFileOpenDialog( ff, this );

    if ( gffFile == null || !gffFile.exists() )
    {
      return;
    }

    txtGFFFileName.setText( gffFile.getName() );

    // Process the GFF file
    //
    loadGFFFile( gffFile );
  }

  private void loadGFFFile( File gffFile )
  {
    GFFFileReader gfr = new GFFFileReader( gffFile );

    for ( String sequenceId : _sequenceIds )
    {
      gfr.addSequenceIdFilter( sequenceId );
    }

    _records.clear();

    List< GFFRecord > records = null;

    if ( gfr.processFile() )
    {
      records = gfr.getGFFRecords();
    }

    if ( records == null )
    {
      lblStatus.setText( " Unable to load annotations from '" + gffFile.getName() + "'" );
      return;
    }

    lblStatus.setText( " Loaded annotations" );

    _records.addAll( records );

    // Get the GFF type sets
    //
    Set<String> gffTypeSetAll = new HashSet<String>();
    Set<String> gffTypeSetID = new HashSet<String>();

    for ( GFFRecord gffrec : records )
    {
      // Set of all types
      gffTypeSetAll.add( gffrec.getType() );

      if ( gffrec.getAttribute( "ID" ) != null )
      {
        // Set of types for which the GFF record has the ID attribute set
        gffTypeSetID.add( gffrec.getType() );
      }
    }

    _allTypes.clear();
    _mainTypes.clear();

    _allTypes.addAll( gffTypeSetAll );
    _mainTypes.addAll( gffTypeSetID );

    Collections.sort( _allTypes );
    Collections.sort( _mainTypes );

    initialiseListData();

    System.gc();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        txtGFFFileName = new javax.swing.JTextField();
        btnChooseGFFFile = new javax.swing.JButton();
        chkShowAllTypes = new javax.swing.JCheckBox();
        paneRight = new javax.swing.JScrollPane();
        listSelectedGFFTypes = new javax.swing.JList();
        lblStatus = new javax.swing.JLabel();
        paneLeft = new javax.swing.JScrollPane();
        listAllGFFTypes = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        btnMoveAllLeft = new javax.swing.JButton();
        btnMoveAllRight = new javax.swing.JButton();

        setForeground(java.awt.Color.white);
        setMaximumSize(new java.awt.Dimension(400, 420));
        setMinimumSize(new java.awt.Dimension(400, 420));
        setPreferredSize(new java.awt.Dimension(400, 420));

        txtGFFFileName.setText(" Please choose a GFF file");
        txtGFFFileName.setEnabled(false);

        btnChooseGFFFile.setText("...");
        btnChooseGFFFile.setToolTipText("Click to choose an annotation file in GFF format");
        btnChooseGFFFile.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnChooseGFFFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnChooseGFFFileActionPerformed(evt);
            }
        });

        chkShowAllTypes.setText("Show all");
        chkShowAllTypes.setToolTipText("<html>When checked all of the annotation types (&nbsp;3<sup>rd</sup> column in the file) are shown.<br/>Only the annotations with an ID in the last column are shown when unchecked </html> ");
        chkShowAllTypes.setContentAreaFilled(false);
        chkShowAllTypes.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chkShowAllTypes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkShowAllTypesActionPerformed(evt);
            }
        });

        listSelectedGFFTypes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        listSelectedGFFTypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listSelectedGFFTypes.setToolTipText("Double-click an item to remove it");
        listSelectedGFFTypes.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                listSelectedGFFTypesMouseClicked(evt);
            }
        });
        paneRight.setViewportView(listSelectedGFFTypes);

        lblStatus.setText("No file");

        listAllGFFTypes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        listAllGFFTypes.setToolTipText("Double-click a type to add it");
        listAllGFFTypes.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                listAllGFFTypesMouseClicked(evt);
            }
        });
        paneLeft.setViewportView(listAllGFFTypes);

        jLabel1.setText("Selected types");

        btnMoveAllLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/double_arrow-round_left.png"))); // NOI18N
        btnMoveAllLeft.setIconTextGap(0);
        btnMoveAllLeft.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnMoveAllLeft.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMoveAllLeftActionPerformed(evt);
            }
        });

        btnMoveAllRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/double_arrow-round_right.png"))); // NOI18N
        btnMoveAllRight.setIconTextGap(0);
        btnMoveAllRight.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnMoveAllRight.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMoveAllRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtGFFFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnChooseGFFFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkShowAllTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(150, 150, 150)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paneLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMoveAllLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMoveAllRight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(paneRight, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtGFFFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseGFFFile))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkShowAllTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnMoveAllLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnMoveAllRight, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(paneRight, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void btnChooseGFFFileActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_btnChooseGFFFileActionPerformed
  {//GEN-HEADEREND:event_btnChooseGFFFileActionPerformed
    doChooseGFFFile();
  }//GEN-LAST:event_btnChooseGFFFileActionPerformed

  private void chkShowAllTypesActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_chkShowAllTypesActionPerformed
  {//GEN-HEADEREND:event_chkShowAllTypesActionPerformed
    initialiseListData();
  }//GEN-LAST:event_chkShowAllTypesActionPerformed

  private void listAllGFFTypesMouseClicked( java.awt.event.MouseEvent evt )//GEN-FIRST:event_listAllGFFTypesMouseClicked
  {//GEN-HEADEREND:event_listAllGFFTypesMouseClicked
    if ( evt.getClickCount() == 2 )
    {
      Object obj = listAllGFFTypes.getSelectedValue();
      moveItem( obj, true );
    }
  }//GEN-LAST:event_listAllGFFTypesMouseClicked

  private void listSelectedGFFTypesMouseClicked( java.awt.event.MouseEvent evt )//GEN-FIRST:event_listSelectedGFFTypesMouseClicked
  {//GEN-HEADEREND:event_listSelectedGFFTypesMouseClicked
    if ( evt.getClickCount() == 2 )
    {
      Object obj = listSelectedGFFTypes.getSelectedValue();
      moveItem( obj, false );
    }
  }//GEN-LAST:event_listSelectedGFFTypesMouseClicked

  private void btnMoveAllLeftActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_btnMoveAllLeftActionPerformed
  {//GEN-HEADEREND:event_btnMoveAllLeftActionPerformed
    moveAll( false );
  }//GEN-LAST:event_btnMoveAllLeftActionPerformed

  private void btnMoveAllRightActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_btnMoveAllRightActionPerformed
  {//GEN-HEADEREND:event_btnMoveAllRightActionPerformed
    moveAll( true );
  }//GEN-LAST:event_btnMoveAllRightActionPerformed

  private void moveItem( Object o, boolean toRight )
  {
    if ( o == null )
      return;

    String s = o.toString();

    if ( toRight )
    {
      _listLeft.remove( s );
      _listRight.add( s );
    }
    else
    {
      _listLeft.add( s );
      _listRight.remove( s );
    }

    setListData();
  }

  private void moveAll( boolean toRight )
  {
    if ( toRight )
    {
      _listRight.addAll( _listLeft );
      _listLeft.clear();
    }
    else
    {
      _listLeft.addAll( _listRight );
      _listRight.clear();
    }

    setListData();
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseGFFFile;
    private javax.swing.JButton btnMoveAllLeft;
    private javax.swing.JButton btnMoveAllRight;
    private javax.swing.JCheckBox chkShowAllTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList listAllGFFTypes;
    private javax.swing.JList listSelectedGFFTypes;
    private javax.swing.JScrollPane paneLeft;
    private javax.swing.JScrollPane paneRight;
    private javax.swing.JTextField txtGFFFileName;
    // End of variables declaration//GEN-END:variables

  private void initialiseListData()
  {
    // TODO: Always add these one ? List is "gene", "miRNA", "pseudogene", "transposable_element".

    _listLeft.clear();
    _listRight.clear();

    _listLeft.addAll( ( chkShowAllTypes.isSelected() ? _allTypes : _mainTypes ) );

    // Always try and put the following in the selected list
    final String[] DEFAULT_GFF_TYPES = { "gene", "miRNA", "pseudogene", "transposable_element" };

    for ( String s : DEFAULT_GFF_TYPES )
    {
      if ( _listLeft.contains( s ) )
      {
        _listLeft.remove( s );
        _listRight.add( s );
      }
    }

    setListData();
  }

  private void setListData()
  {
    Object[] obj = {};

    listAllGFFTypes.setListData( obj );
    listSelectedGFFTypes.setListData( obj );

    Collections.sort( _listLeft );
    Collections.sort( _listRight );

    listAllGFFTypes.setListData( _listLeft.toArray() );
    listSelectedGFFTypes.setListData( _listRight.toArray() );
  }

  List<String> getSelectedGFFTypes()
  {
    return _listRight;
  }

  List<GFFRecord> getGFFRecords()
  {
    return _records;
  }

  void dispose()
  {
    _records.clear();
  }


  //
  public static void main( String... args )
  {
    GFFChooser gffPanel = new GFFChooser( "Chr1" );

    int optionPaneResult = JOptionPane.showConfirmDialog( null,
      gffPanel,
      "Select GFF types",
      JOptionPane.OK_CANCEL_OPTION );

    System.out.println( "rtc: " + optionPaneResult );
    System.out.println( gffPanel.getSelectedGFFTypes() );
  }
}
