/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package uk.ac.uea.cmp.srnaworkbench.history;

import java.awt.Component;
import java.io.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import uk.ac.uea.cmp.srnaworkbench.utils.Tools;
import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;
import uk.ac.uea.cmp.srnaworkbench.swing.customcomponentrenderers.StandardMultilineCellRenderer;
import static org.apache.commons.io.IOUtils.LINE_SEPARATOR;


/**
 *
 * @author w0445959
 */
public class HistoryBrowser extends javax.swing.JDialog 
{
  HistoryFileType myHistoryType = null;
  File historyFile = null;
  private int myResult;
  
  /**
   * Creates new form HistoryBrowser
   */
  public HistoryBrowser(JFrame parent, String title, String message, HistoryFileType historyType)
  {
    super( parent, title, true );
    initComponents();
    
    dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Path", "Tool Name", "Date Accessed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.util.Date.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

    TableCellRenderer tableCellRenderer = new DefaultTableCellRenderer()
    {
      SimpleDateFormat f = new SimpleDateFormat( "dd-MM-yyyy HH:mm:ss" );

      public Component getTableCellRendererComponent( JTable table,
                                                      Object value, boolean isSelected, boolean hasFocus,
                                                      int row, int column )
      {
        if ( value instanceof Date )
        {
          value = f.format( value );
        }
        return super.getTableCellRendererComponent( table, value, isSelected,
          hasFocus, row, column );
      }
    };

    dataTable.getColumnModel().getColumn( 2 ).setCellRenderer( tableCellRenderer );
    
    myResult = JOptionPane.CANCEL_OPTION;
    myHistoryType = historyType;
    if(myHistoryType.equals( HistoryFileType.GENOME) )
      dataTable.setSelectionMode( ListSelectionModel.SINGLE_SELECTION);
    historyFile = new File(myHistoryType.selectHistory(  ) );
    switch(myHistoryType)
    {
      case SRNA:
        this.setTitle( "sRNA File History");
        break;
      case MRNA:
        this.setTitle( "mRNA File History");
        break;
      case GENOME:
        this.setTitle( "Genome File History");
        break;
      case TEMP:
        this.setTitle( "Temp Directory History");
        break;
      default:
    }
    dataTable.setDefaultRenderer(String.class, new StandardMultilineCellRenderer());
    populateListBox();
    
    
    
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        continueButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        clearHistory = new javax.swing.JButton();

        setBackground(new java.awt.Color(120, 120, 120));

        jPanel1.setBackground(new java.awt.Color(120, 120, 120));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(HistoryBrowser.class, "HistoryBrowser.jPanel1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        dataTable.setBackground(new java.awt.Color(120, 120, 120));
        dataTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dataTable.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        dataTable.setForeground(new java.awt.Color(255, 255, 255));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "File Path", "Tool Name", "Date Accessed"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        dataTable.setAutoCreateRowSorter(true);
        dataTable.setFillsViewportHeight(true);
        dataTable.setGridColor(new java.awt.Color(153, 204, 255));
        dataTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        dataTable.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                dataTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0)
        {
            dataTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(HistoryBrowser.class, "HistoryBrowser.dataTable.columnModel.title0")); // NOI18N
            dataTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(HistoryBrowser.class, "HistoryBrowser.dataTable.columnModel.title1")); // NOI18N
            dataTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(HistoryBrowser.class, "HistoryBrowser.dataTable.columnModel.title2")); // NOI18N
        }

        continueButton.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        continueButton.setText(org.openide.util.NbBundle.getMessage(HistoryBrowser.class, "HistoryBrowser.continueButton.text")); // NOI18N
        continueButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                continueButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cancelButton.setText(org.openide.util.NbBundle.getMessage(HistoryBrowser.class, "HistoryBrowser.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        clearHistory.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        clearHistory.setText(org.openide.util.NbBundle.getMessage(HistoryBrowser.class, "HistoryBrowser.clearHistory.text")); // NOI18N
        clearHistory.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clearHistory)
                        .addGap(18, 18, 18)
                        .addComponent(continueButton)
                        .addGap(5, 5, 5)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(continueButton)
                    .addComponent(cancelButton)
                    .addComponent(clearHistory)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void continueButtonActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_continueButtonActionPerformed
  {//GEN-HEADEREND:event_continueButtonActionPerformed

    processOkEvent();
  }//GEN-LAST:event_continueButtonActionPerformed

  private void processOkEvent()
  {
    if ( dataTable.getSelectedRowCount() > 0 )
    {
      setVisible( false );
      myResult = JOptionPane.OK_OPTION;
    }
    else
    {
      JOptionPane.showMessageDialog( this,
        "Must select a file from the list to continue.",
        "Configuration error",
        JOptionPane.ERROR_MESSAGE );
    }
  }
  public void setSingleSelectionMode(boolean active)
  {
    if(active)
      dataTable.setSelectionMode( ListSelectionModel.SINGLE_SELECTION);
    else
      dataTable.setSelectionMode( ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  }
  private void cancelButtonActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed

    setVisible( false );
    myResult = JOptionPane.CANCEL_OPTION;
    dispose();
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void clearHistoryActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_clearHistoryActionPerformed
  {//GEN-HEADEREND:event_clearHistoryActionPerformed
     if(JOptionPane.showConfirmDialog( this,
        "This will delete all of your history for this type of file (but not any data on your drive).",
        "Delete warning",
        JOptionPane.WARNING_MESSAGE ) == JOptionPane.YES_OPTION)
     {

       FileWriter outFile = null;
       PrintWriter out = null;
       try
       {
         outFile = new FileWriter( myHistoryType.selectHistory() );
         out = new PrintWriter( outFile );
         out.print( "");
          DefaultTableModel dm = (DefaultTableModel) dataTable.getModel();
        dm.getDataVector().removeAllElements();
        ((DefaultTableModel)dataTable.getModel()).setRowCount(0);
        dataTable.repaint();
       }
       catch ( IOException ex )
       {
         LOGGER.log(Level.WARNING, ex.getMessage() );
       }
       finally
       {
         try
         {
           outFile.close();
           out.close();
         }
         catch ( IOException ex )
         {
           LOGGER.log(Level.WARNING, ex.getMessage() );
         }
       }
      

     }
  }//GEN-LAST:event_clearHistoryActionPerformed

  private void dataTableMouseClicked( java.awt.event.MouseEvent evt )//GEN-FIRST:event_dataTableMouseClicked
  {//GEN-HEADEREND:event_dataTableMouseClicked
    if(evt.getClickCount() ==2)
    {
      processOkEvent();
    }
  }//GEN-LAST:event_dataTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearHistory;
    private javax.swing.JButton continueButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

 
  public String[] getSelectedFiles()
  {
    
    int[] selectedRows = dataTable.getSelectedRows();
    String[] selectedPaths = new String[selectedRows.length];
    int i = 0;
    for(int index : selectedRows)
    {
      selectedPaths[i] = dataTable.getValueAt( index, 0 ).toString() + LINE_SEPARATOR;
      i++;
    }
    return selectedPaths;
  }
  
  public int getValue()
  {
    return myResult;
  }


  private void populateListBox()
  {
    

    final ArrayList<Object[]> rows = new ArrayList<Object[]>();
    try
    {
      BufferedReader br = new BufferedReader( new InputStreamReader( new FileInputStream( historyFile ) ) );

      String line;
      while ( ( line = br.readLine() ) != null )
      {
        String[] splitLine = line.split( Tools.TAB );
        if ( splitLine.length == 3 )
        {
          if ( new File( splitLine[0] ).exists() )
          {
            Date predefined = new Date();
            try
            {
              //Date newDate =  new Date(splitLine[2]);
              DateFormat df = DateFormat.getDateTimeInstance();
    
              df.setTimeZone( TimeZone.getDefault() );
              predefined = df.parse(splitLine[2]);
            }
            catch ( ParseException ex )
            {
              LOGGER.log(Level.WARNING, ex.getMessage() );
            }
            final Object[] row =
            {
              splitLine[0],
              splitLine[1],
              predefined
            };
            rows.add( row );
          }
          
        }
      }

      SwingUtilities.invokeLater( new Runnable()
      {
        @Override
        public void run()
        {
          for ( ListIterator<Object[]> iterator = rows.listIterator(rows.size()); iterator.hasPrevious(); )
          {
            Object[] row = iterator.previous();
            DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
            model.addRow( row );
            dataTable.setModel( model );
          }
        }
      } );

      
    }
    catch ( IOException ex )
    {
      LOGGER.log( Level.WARNING, "cannot find history file when populating box", ex.getMessage() );
    }

  }
}
