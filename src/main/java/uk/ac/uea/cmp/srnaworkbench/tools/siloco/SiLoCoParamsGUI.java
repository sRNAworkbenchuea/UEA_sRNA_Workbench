/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SiLoCoParamsGUI.java
 *
 * Created on 07-Oct-2011, 10:59:17
 */
package uk.ac.uea.cmp.srnaworkbench.tools.siloco;

import java.util.logging.Level;
import javax.swing.text.StyledDocument;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolParameters;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolParamsHost;
import uk.ac.uea.cmp.srnaworkbench.utils.StringUtils;
import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;

/**
 *
 * @author w0445959
 */
public class SiLoCoParamsGUI extends javax.swing.JPanel implements ToolParamsHost
{
  private SiLoCoParams params;

  /** Creates new form SiLoCoParamsGUI */
  public SiLoCoParamsGUI( SiLoCoMainFrame parent )
  {
    initComponents();
    this.tbParams.setHost( this );
  }

  public boolean createParams()
  {


    try
    {
      String str_max_hits = this.maxHitsTxt.getText().trim();
      String str_min_len = this.minSeqLengthTxt.getText().trim();
      String str_max_len = this.maxSeqLengthTxt.getText().trim();
      String str_min_loci_size = this.minClusterSizeTxt.getText().trim();
      String str_min_abd = this.minAbundanceTxt.getText().trim();
      String str_min_loci_sep = this.sRNALociDistanceTxt.getText().trim();

      int max_hits = StringUtils.safeIntegerParse( str_max_hits, SiLoCoParams.Definition.MAXIMUM_GENOME_HITS.getDefault( Integer.class ) );
      int min_len = StringUtils.safeIntegerParse( str_min_len, SiLoCoParams.Definition.MINIMUM_SRNA_LENGTH.getDefault( Integer.class ) );
      int max_len = StringUtils.safeIntegerParse( str_max_len, SiLoCoParams.Definition.MAXIMUM_SRNA_LENGTH.getDefault( Integer.class ) );
      int min_loci_sep = StringUtils.safeIntegerParse( str_min_loci_sep, SiLoCoParams.Definition.MINIMUM_CLUSTER_SEPARATION_DISTANCE.getDefault( Integer.class ) );
      int min_abd = StringUtils.safeIntegerParse( str_min_abd, SiLoCoParams.Definition.MINIMUM_SRNA_ABUNDANCE.getDefault( Integer.class ) );
      int min_loci_size = StringUtils.safeIntegerParse( str_min_loci_size, SiLoCoParams.Definition.MINIMUM_LOCUS_SIZE.getDefault( Integer.class ) );

      SiLoCoParams newParams = new SiLoCoParams.Builder().setMinConsider( min_abd ).setMaxGenomeHits( max_hits ).setMinLength( min_len ).
      setMaxLength( max_len ).setClusterSentinel( min_loci_sep ).setMinLocusSize( min_loci_size ).build();
      this.params = newParams;
    }
    catch ( IllegalArgumentException e )
    {
      LOGGER.log( Level.WARNING, "failed params: {0}", e);
      return false;
    }

    return true;
  }
  @Override
    public SiLoCoParams getParams()
    {
      if(createParams())
        return params;
      return null;
    }
    public StyledDocument getLog()
    {
        return this.siLoCoLogPane.getStyledDocument();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        defaultParamsPane = new javax.swing.JPanel();
        defaultParams = new javax.swing.JButton();
        paramsPanel = new javax.swing.JPanel();
        genomicHitsLabel = new javax.swing.JLabel();
        minSeqLengthLabel = new javax.swing.JLabel();
        seqLengthLabel = new javax.swing.JLabel();
        maxSeqLengthLabel = new javax.swing.JLabel();
        minClusterSizeLabel = new javax.swing.JLabel();
        minAbundanceLabel = new javax.swing.JLabel();
        sRNALociDistanceLabel = new javax.swing.JLabel();
        maxHitsTxt = new javax.swing.JFormattedTextField();
        minSeqLengthTxt = new javax.swing.JFormattedTextField();
        maxSeqLengthTxt = new javax.swing.JFormattedTextField();
        minClusterSizeTxt = new javax.swing.JFormattedTextField();
        minAbundanceTxt = new javax.swing.JFormattedTextField();
        sRNALociDistanceTxt = new javax.swing.JFormattedTextField();
        siLoCoLogPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        siLoCoLogPane = new javax.swing.JTextPane();
        tbParams = new uk.ac.uea.cmp.srnaworkbench.swing.ParamsToolBar();

        setBackground(new java.awt.Color(120, 120, 120));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SiLoCo Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 14), new java.awt.Color(153, 204, 255))); // NOI18N

        defaultParamsPane.setBackground(new java.awt.Color(120, 120, 120));
        defaultParamsPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        defaultParamsPane.setToolTipText("Default Parameters");

        defaultParams.setBackground(new java.awt.Color(120, 120, 120));
        defaultParams.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        defaultParams.setText("Set Default Parameters");
        defaultParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultParamsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout defaultParamsPaneLayout = new javax.swing.GroupLayout(defaultParamsPane);
        defaultParamsPane.setLayout(defaultParamsPaneLayout);
        defaultParamsPaneLayout.setHorizontalGroup(
            defaultParamsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultParamsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultParams, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );
        defaultParamsPaneLayout.setVerticalGroup(
            defaultParamsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultParamsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(defaultParams, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paramsPanel.setBackground(new java.awt.Color(120, 120, 120));
        paramsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SiLoCo Parameters", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 12), new java.awt.Color(153, 204, 255))); // NOI18N
        paramsPanel.setAutoscrolls(true);
        paramsPanel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N
        paramsPanel.setPreferredSize(new java.awt.Dimension(271, 647));

        genomicHitsLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        genomicHitsLabel.setForeground(new java.awt.Color(255, 255, 255));
        genomicHitsLabel.setText("Max Genomic Hits:");

        minSeqLengthLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        minSeqLengthLabel.setForeground(new java.awt.Color(255, 255, 255));
        minSeqLengthLabel.setText("Minimum");

        seqLengthLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        seqLengthLabel.setForeground(new java.awt.Color(255, 255, 255));
        seqLengthLabel.setText("Sequence Length");

        maxSeqLengthLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        maxSeqLengthLabel.setForeground(new java.awt.Color(255, 255, 255));
        maxSeqLengthLabel.setText("Maximum");

        minClusterSizeLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        minClusterSizeLabel.setForeground(new java.awt.Color(255, 255, 255));
        minClusterSizeLabel.setText("Minimum sRNA Locus Size:");

        minAbundanceLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        minAbundanceLabel.setForeground(new java.awt.Color(255, 255, 255));
        minAbundanceLabel.setText("Minimum Sequence Abundance");

        sRNALociDistanceLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        sRNALociDistanceLabel.setForeground(new java.awt.Color(255, 255, 255));
        sRNALociDistanceLabel.setText("sRNA Loci Distance");

        maxHitsTxt.setToolTipText("Maximum number of hits to the Genome");
        maxHitsTxt.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        minSeqLengthTxt.setToolTipText("Minimum length of sRNA sequence");
        minSeqLengthTxt.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        minSeqLengthTxt.setVerifyInputWhenFocusTarget(false);

        maxSeqLengthTxt.setToolTipText("Maximum length of sRNA sequence");
        maxSeqLengthTxt.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        minClusterSizeTxt.setToolTipText("Minimum size of miRNA producing loci");
        minClusterSizeTxt.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        minAbundanceTxt.setToolTipText("Minimum abundance of sRNA to be considered");
        minAbundanceTxt.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        sRNALociDistanceTxt.setToolTipText("Maximum distance between miRNA and miRNA*");
        sRNALociDistanceTxt.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        javax.swing.GroupLayout paramsPanelLayout = new javax.swing.GroupLayout(paramsPanel);
        paramsPanel.setLayout(paramsPanelLayout);
        paramsPanelLayout.setHorizontalGroup(
            paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(maxSeqLengthLabel)
                .addGap(56, 56, 56))
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addComponent(minClusterSizeTxt)
                .addContainerGap())
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addComponent(minAbundanceTxt)
                .addContainerGap())
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addComponent(sRNALociDistanceTxt)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paramsPanelLayout.createSequentialGroup()
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paramsPanelLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(maxHitsTxt))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paramsPanelLayout.createSequentialGroup()
                        .addComponent(minSeqLengthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxSeqLengthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genomicHitsLabel)
                    .addComponent(seqLengthLabel)
                    .addGroup(paramsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(minSeqLengthLabel))
                    .addComponent(minClusterSizeLabel)
                    .addComponent(minAbundanceLabel)
                    .addComponent(sRNALociDistanceLabel))
                .addContainerGap())
        );
        paramsPanelLayout.setVerticalGroup(
            paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramsPanelLayout.createSequentialGroup()
                .addComponent(genomicHitsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxHitsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(seqLengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minSeqLengthLabel)
                    .addComponent(maxSeqLengthLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paramsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minSeqLengthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxSeqLengthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minClusterSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minClusterSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minAbundanceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minAbundanceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sRNALociDistanceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sRNALociDistanceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        siLoCoLogPanel.setBackground(new java.awt.Color(153, 153, 153));
        siLoCoLogPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SiLoCo Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 12), new java.awt.Color(153, 204, 255))); // NOI18N
        siLoCoLogPanel.setAutoscrolls(true);

        siLoCoLogPane.setBackground(new java.awt.Color(120, 120, 120));
        siLoCoLogPane.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(siLoCoLogPane);

        javax.swing.GroupLayout siLoCoLogPanelLayout = new javax.swing.GroupLayout(siLoCoLogPanel);
        siLoCoLogPanel.setLayout(siLoCoLogPanelLayout);
        siLoCoLogPanelLayout.setHorizontalGroup(
            siLoCoLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );
        siLoCoLogPanelLayout.setVerticalGroup(
            siLoCoLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(siLoCoLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(paramsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
            .addComponent(defaultParamsPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tbParams, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defaultParamsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paramsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addGap(34, 34, 34)
                .addComponent(siLoCoLogPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void defaultParamsActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_defaultParamsActionPerformed
  {//GEN-HEADEREND:event_defaultParamsActionPerformed
    update( SiLoCoParams.createDefaultPlantParams() );
  }//GEN-LAST:event_defaultParamsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton defaultParams;
    private javax.swing.JPanel defaultParamsPane;
    private javax.swing.JLabel genomicHitsLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField maxHitsTxt;
    private javax.swing.JLabel maxSeqLengthLabel;
    private javax.swing.JFormattedTextField maxSeqLengthTxt;
    private javax.swing.JLabel minAbundanceLabel;
    private javax.swing.JFormattedTextField minAbundanceTxt;
    private javax.swing.JLabel minClusterSizeLabel;
    private javax.swing.JFormattedTextField minClusterSizeTxt;
    private javax.swing.JLabel minSeqLengthLabel;
    private javax.swing.JFormattedTextField minSeqLengthTxt;
    private javax.swing.JPanel paramsPanel;
    private javax.swing.JLabel sRNALociDistanceLabel;
    private javax.swing.JFormattedTextField sRNALociDistanceTxt;
    private javax.swing.JLabel seqLengthLabel;
    private javax.swing.JTextPane siLoCoLogPane;
    private javax.swing.JPanel siLoCoLogPanel;
    private uk.ac.uea.cmp.srnaworkbench.swing.ParamsToolBar tbParams;
    // End of variables declaration//GEN-END:variables



  @Override
  public void update( ToolParameters params )
  {
     if ( !( params instanceof SiLoCoParams ) )
    {
      showErrorDialog( "Unexpected error: parameters object provided is not a valid siloco params file." );
      return;
    }

    SiLoCoParams mp = (SiLoCoParams) params;


    maxHitsTxt.setText( Integer.toString( mp.getMaxGenomeHits() ) );
    minSeqLengthTxt.setText( Integer.toString( mp.getMinLength() ) );
    maxSeqLengthTxt.setText( Integer.toString( mp.getMaxLength() ) );
    
    minClusterSizeTxt.setText( Integer.toString( mp.getMinLocusSize() ) );

    minAbundanceTxt.setText( Integer.toString( mp.getMinConsider() ) );
    sRNALociDistanceTxt.setText( Integer.toString( mp.getClusterSentinel() ) );

  }

  @Override
  public void showErrorDialog( String message )
  {
    throw new UnsupportedOperationException( "Not supported yet." );
  }

    
}
