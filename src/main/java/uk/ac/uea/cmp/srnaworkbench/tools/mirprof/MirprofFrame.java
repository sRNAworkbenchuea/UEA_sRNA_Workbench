/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FilterToolMainFrame.java
 *
 * Created on 09-May-2011, 13:20:35
 */
package uk.ac.uea.cmp.srnaworkbench.tools.mirprof;

import java.awt.Cursor;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.Outline;

import uk.ac.uea.cmp.srnaworkbench.GUIInterface;
import uk.ac.uea.cmp.srnaworkbench.data.mirbase.MirBase;
import uk.ac.uea.cmp.srnaworkbench.data.mirbase.Updater;
import uk.ac.uea.cmp.srnaworkbench.help.JHLauncher;
import uk.ac.uea.cmp.srnaworkbench.swing.OutlineNode;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolHost;
import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils;
import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils.FileExtFilter;
import uk.ac.uea.cmp.srnaworkbench.utils.GenerateWaitCursor;
import uk.ac.uea.cmp.srnaworkbench.utils.GoController;
import uk.ac.uea.cmp.srnaworkbench.utils.StatusTracker;

import static org.apache.commons.io.IOUtils.DIR_SEPARATOR;
import static org.apache.commons.io.IOUtils.LINE_SEPARATOR;

import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;
import uk.ac.uea.cmp.srnaworkbench.utils.Tools;

/**
 * Main frame for miRProf.
 * @author Matthew Stocks and Dan Mapleson
 */
public final class MirprofFrame extends javax.swing.JInternalFrame implements GUIInterface, ToolHost
{
  private MirprofRunner m_runner;
  private MirprofParamsPanel m_params;
  private GoController go_control;

  private MirprofInputPanel m_input;
  private MirprofResultsPanel m_output;


  private boolean showingParams = false;

  /**
   * Creates new MirprofMainFrame
   */
  public MirprofFrame()
  {
    initComponents();

    m_input = new MirprofInputPanel();
    m_output = new MirprofResultsPanel();

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout( pnlInput );
    pnlInput.setLayout( mainPanelLayout );
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 648, Short.MAX_VALUE ).addComponent( m_input ) );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 284, Short.MAX_VALUE ).addComponent( m_input ) );

    javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout( pnlResults );
    pnlResults.setLayout( resultsPanelLayout );
    resultsPanelLayout.setHorizontalGroup(
      resultsPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 648, Short.MAX_VALUE ).addComponent( m_output ) );
    resultsPanelLayout.setVerticalGroup(
      resultsPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 118, Short.MAX_VALUE ).addComponent( m_output ) );

    m_runner = new MirprofRunner( this );

    m_params = new MirprofParamsPanel();
    
    Tools.trackPage( "miRProf Main GUI Frame Loaded");
    
    
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        cmdStart = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        progBar = new javax.swing.JProgressBar();
        lblStatus = new javax.swing.JLabel();
        pnlInput = new javax.swing.JPanel();
        pnlResults = new javax.swing.JPanel();
        mnuMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuFileExport = new javax.swing.JMenu();
        mnuFileExportCSV = new javax.swing.JMenuItem();
        mnuFileExportFasta = new javax.swing.JMenuItem();
        mnuFileSep1 = new javax.swing.JPopupMenu.Separator();
        mnuFileExit = new javax.swing.JMenuItem();
        mnuRun = new javax.swing.JMenu();
        mnuRunStart = new javax.swing.JMenuItem();
        mnuRunCancel = new javax.swing.JMenuItem();
        mnuRunSep1 = new javax.swing.JPopupMenu.Separator();
        mnuRunReset = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mnuHelpContents = new javax.swing.JMenuItem();

        setBackground(new java.awt.Color(120, 120, 120));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("miRProf");
        setFrameIcon(new javax.swing.ImageIcon("/Developer/Applications/sRNAWorkbench/Workbench/src/main/resources/images/GUI_Icons/mirprof_logo_small.png")); // NOI18N
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                closingFrame(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        cmdStart.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdStart.setText("Start");
        cmdStart.setToolTipText("<html> Start processing. </html>");
        cmdStart.setEnabled(false);
        cmdStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdStartActionPerformed(evt);
            }
        });

        cmdCancel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdCancel.setText("Cancel");
        cmdCancel.setToolTipText("<html> Cancel process. </html>");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdCancelActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("Status:");

        pnlInput.setBackground(new java.awt.Color(120, 120, 120));
        pnlInput.setPreferredSize(new java.awt.Dimension(550, 170));

        javax.swing.GroupLayout pnlInputLayout = new javax.swing.GroupLayout(pnlInput);
        pnlInput.setLayout(pnlInputLayout);
        pnlInputLayout.setHorizontalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 764, Short.MAX_VALUE)
        );
        pnlInputLayout.setVerticalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );

        pnlResults.setBackground(new java.awt.Color(120, 120, 120));

        javax.swing.GroupLayout pnlResultsLayout = new javax.swing.GroupLayout(pnlResults);
        pnlResults.setLayout(pnlResultsLayout);
        pnlResultsLayout.setHorizontalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 764, Short.MAX_VALUE)
        );
        pnlResultsLayout.setVerticalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
        );

        mnuMain.setBackground(new java.awt.Color(213, 219, 245));

        mnuFile.setText("File");

        mnuFileExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/save.png"))); // NOI18N
        mnuFileExport.setText("Export");
        mnuFileExport.setEnabled(false);

        mnuFileExportCSV.setText("Export Results to CSV");
        mnuFileExportCSV.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuFileExportCSVActionPerformed(evt);
            }
        });
        mnuFileExport.add(mnuFileExportCSV);

        mnuFileExportFasta.setText("Export miRNAs to FASTA");
        mnuFileExportFasta.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuFileExportFastaActionPerformed(evt);
            }
        });
        mnuFileExport.add(mnuFileExportFasta);

        mnuFile.add(mnuFileExport);
        mnuFile.add(mnuFileSep1);

        mnuFileExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/close-tool.png"))); // NOI18N
        mnuFileExit.setText("Close");
        mnuFileExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuFileExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileExit);

        mnuMain.add(mnuFile);

        mnuRun.setText("Run");

        mnuRunStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/light.png"))); // NOI18N
        mnuRunStart.setText("Start");
        mnuRunStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunStartActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunStart);

        mnuRunCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lightCancel.png"))); // NOI18N
        mnuRunCancel.setText("Cancel");
        mnuRunCancel.setEnabled(false);
        mnuRunCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunCancelActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunCancel);
        mnuRun.add(mnuRunSep1);

        mnuRunReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/reload.png"))); // NOI18N
        mnuRunReset.setText("Reset");
        mnuRunReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunResetActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunReset);

        mnuMain.add(mnuRun);

        mnuHelp.setText("Help");

        mnuHelpContents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lookup.png"))); // NOI18N
        mnuHelpContents.setText("Contents");
        mnuHelp.add(mnuHelpContents);

        mnuMain.add(mnuHelp);

        setJMenuBar(mnuMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlResults, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
                    .addComponent(progBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdStart, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInput, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCancel)
                    .addComponent(cmdStart))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  public void setupMiRBase()
  {
    //find miRBase
    boolean miRBaseFound = m_params.checkMiRBaseConfiguration();

    //a miRBase directory must be in place for this tool to work
    if ( miRBaseFound )
    {
      m_params.setVisible( true );
      m_params.setEnabled( true );

      go_control = new GoController( this.cmdStart, this.cmdCancel, this.mnuRunStart, this.mnuRunCancel );

      setRunningStatus( false );
      reset();

      JHLauncher.setupContextDependentHelp( "HTML_mirprof_html", mnuHelpContents, this.getRootPane() );
    }
    else
    {
      this.setVisible( false );
      this.dispose();
    }
  }
  
    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdStartActionPerformed
    {//GEN-HEADEREND:event_cmdStartActionPerformed
      runProcedure();
    }//GEN-LAST:event_cmdStartActionPerformed

    private void closingFrame(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_closingFrame
    {//GEN-HEADEREND:event_closingFrame
      // TODO add your handling code here:
    }//GEN-LAST:event_closingFrame

    private void mnuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileExitActionPerformed
      shutdown();
    }//GEN-LAST:event_mnuFileExitActionPerformed

    @Override
  public void shutdown()
  {
   this.setVisible( false );
   cancel();
  this.dispose();
  }
  private void cmdCancelActionPerformed( java.awt.event.ActionEvent evt )
    {//GEN-FIRST:event_cmdCancelActionPerformed
      cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

  private void mnuRunStartActionPerformed( java.awt.event.ActionEvent evt )
	{//GEN-FIRST:event_mnuRunActionPerformed
    runProcedure();
    }//GEN-LAST:event_mnuRunActionPerformed

  private void mnuRunCancelActionPerformed( java.awt.event.ActionEvent evt )
	{//GEN-FIRST:event_mnuCancelActionPerformed
    cancel();
    }//GEN-LAST:event_mnuCancelActionPerformed

    private void mnuFileExportCSVActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuFileExportCSVActionPerformed
    {//GEN-HEADEREND:event_mnuFileExportCSVActionPerformed
      File outputFile = FileDialogUtils.showFileSaveDialog( this, FileExtFilter.CSV.getFilter() );
      if ( outputFile != null )
      {
        m_runner.writeResults( outputFile );
        exportMainTable(outputFile );
      }
	}//GEN-LAST:event_mnuFileExportCSVActionPerformed

    private void mnuFileExportFastaActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuFileExportFastaActionPerformed
    {//GEN-HEADEREND:event_mnuFileExportFastaActionPerformed

      File outputFile = FileDialogUtils.showFileSaveDialog( this, FileExtFilter.FASTA.getFilter() );
      if ( outputFile != null )
      {
        m_runner.writeFasta( outputFile );
      }
	}//GEN-LAST:event_mnuFileExportFastaActionPerformed

  private void mnuRunResetActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuRunResetActionPerformed
  {//GEN-HEADEREND:event_mnuRunResetActionPerformed
    reset();
  }//GEN-LAST:event_mnuRunResetActionPerformed


  private void cancel()
  {
    m_runner.cancel();
  }

  private void reset()
  {
    m_runner = new MirprofRunner( this );
    
    m_input.reset();
    m_output.resetTable();
    m_params.reset();
  }

  @Override
  public void setEnabled( boolean enabled )
  {
    super.setEnabled( enabled );

    m_input.setEnabled( enabled );

    setRunningStatus( false );
  }


  // ***** GUI Interface methods *****

  @Override
  public void runProcedure()
  {
    List<File> samples = m_input.getInputFiles();
    File mirbase = getMatureFile( m_params.getMirbaseCategory(), m_params.getMirbaseVersion() );
    File genome = m_input.getGenome();

    if(genome == null)
    {
      JOptionPane.showMessageDialog( this,
          "No Genome file specified, normalisation will be done on total reads",
          "miRProf Warning",
          JOptionPane.INFORMATION_MESSAGE );
    }
    MirprofParams params = m_params.getParams();

    m_runner.runMirprof( samples, mirbase, genome, params, new StatusTracker(this.progBar, this.lblStatus) );
  }

  @Override
  public JPanel getParamsPanel()
  {
    return m_params;
  }

  @Override
  public void setShowingParams( boolean newState )
  {
    showingParams = newState;
  }

  @Override
  public boolean getShowingParams()
  {
    return showingParams;
  }

  // ***** End GUI Interface methods *****



  private File getMatureFile( String cat_str, String ver_str )
  {
    try
    {
      //String cat_str = this.cboMirBaseCategory.getSelectedItem().toString();
      MirBase.Category cat = MirBase.Category.parse( cat_str );

      //String ver_str = this.txtMirBaseVersion.getText().trim();

      if ( !MirBase.localVersionExists( ver_str ) )
      {
        // Need to ask user if they want to download it here...
        int option = JOptionPane.showConfirmDialog( this,
          "The requested miRBase version is not available locally, do you wish to try and download it?",
          "mirBase Updater",
          JOptionPane.YES_NO_OPTION,
          JOptionPane.QUESTION_MESSAGE );

        if ( option == JOptionPane.YES_OPTION )
        {
          if ( !updateMirbase( ver_str, true ) )
          {
            return null;
          }
          else
          {
            //TO DO. Add some update code for params window to reflect mirbase version
          }
        }
        else
        {
          return null;
        }
      }

      return MirBase.getMatureFile( ver_str, cat, false );
    }
    catch(Exception e)
    {
      showErrorDialog( e.getMessage() );
    }

    return null;
  }

  private boolean updateMirbase( String version, boolean force ) throws Exception
  {
    new Thread( new GenerateWaitCursor( this ) ).start();

    if ( !Updater.onlineVersionExists( version ) )
    {
      this.setCursor( Cursor.getDefaultCursor() );
      JOptionPane.showMessageDialog( this,
        "Requested miRBase version not found online, please select a valid miRBase version.",
        "mirBase Updater",
        JOptionPane.INFORMATION_MESSAGE );

      return false;
    }

    Updater.download( version, force );

    this.setCursor( Cursor.getDefaultCursor() );
    JOptionPane.showMessageDialog( this,
      "miRBase version retrieved successfully. Downloaded version: " + version,
      "mirBase Updater",
      JOptionPane.INFORMATION_MESSAGE );

    return true;
  }



  // ***** Start ToolHost methods *****

  @Override
  public void update()
  {
    try
    {
      // Updates the log and filter window in the params GUI
      m_params.populateLog( m_runner.getEngine() );

      // Updates the main tree table output panel
      m_output.display( m_runner.getResults(), m_runner.getFilterStats(), m_runner.getEngine().getInputFileList(), m_runner.getUsingGenome() );
    }
    catch (Exception e)
    {
        e.printStackTrace();
      showErrorDialog( e.getMessage() );
    }
  }

  @Override
  public void showErrorDialog( String message )
  {
    JOptionPane.showMessageDialog( this,
      message,
      "miRProf Error",
      JOptionPane.ERROR_MESSAGE );
  }

  @Override
  public void setRunningStatus( boolean running )
  {
    if ( this.go_control != null )
    {
      this.go_control.setRunning( running );
      this.m_input.setEnabled( !running );
      this.m_params.setEnabled( !running );
      this.mnuRunReset.setEnabled( !running );

      if (this.m_runner.getResults() != null)
        this.mnuFileExport.setEnabled( !running );
      else
        this.mnuFileExport.setEnabled( false );
    }
  }

  // ***** End HostTool methods *****


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdStart;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuFileExit;
    private javax.swing.JMenu mnuFileExport;
    private javax.swing.JMenuItem mnuFileExportCSV;
    private javax.swing.JMenuItem mnuFileExportFasta;
    private javax.swing.JPopupMenu.Separator mnuFileSep1;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenuItem mnuHelpContents;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenu mnuRun;
    private javax.swing.JMenuItem mnuRunCancel;
    private javax.swing.JMenuItem mnuRunReset;
    private javax.swing.JPopupMenu.Separator mnuRunSep1;
    private javax.swing.JMenuItem mnuRunStart;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlResults;
    private javax.swing.JProgressBar progBar;
    // End of variables declaration//GEN-END:variables

     private void exportMainTable( File output )
  {
    FileWriter outCSVFile = null;
    PrintWriter out = null;
    try
    {
      outCSVFile = new FileWriter( output, true );
      out = new PrintWriter( outCSVFile, true );
      //out.
      // Write text to file

      String header = "";
//      if ( m_params.getGroupMismatches() )
//      {
//        header += "ignore mismatches,";
//      }
      if ( !m_params.getGroupOrganisms() )
      {
        header += "Organism Code,";
      }
      else
        header += ",";
//      if ( m_params.getGroupVariant() )
//      {
//        header += "combine variants,";
//      }

      header += "miRNA Code,Sequence,Genome Matches,";
      for ( File sampleFile : this.m_input.getInputFiles() )
      {
        header += "Sample: " + sampleFile.getName() + " raw expression,";
      }
      for ( File sampleFile : this.m_input.getInputFiles() )
      {
        header += "Sample: " + sampleFile.getName() + " normalised expression,";
      }
      
      header += LINE_SEPARATOR;
      out.println();
      out.println(header);
      Outline outline = this.m_output.getOutline();
      DefaultOutlineModel model = (DefaultOutlineModel)outline.getModel();
      OutlineNode treeModel = (OutlineNode)model.getRoot();
      int miRNACount = treeModel.getChildCount();
      

      for(int i = 0; i < miRNACount; i++ )
      {
        OutlineNode chromosomeModel = (OutlineNode)treeModel.getChildAt( i );
        List<String> organismDataObject = chromosomeModel.getUserObject();
        
        for(String organismData : organismDataObject)
        {
          out.println( organismData + "," );
          //out.print(",");
        }
        
        int sequenceCount = chromosomeModel.getChildCount();
        for(int sequenceID = 0; sequenceID < sequenceCount; sequenceID++)
        {
          OutlineNode miRNAData = (OutlineNode)chromosomeModel.getChildAt( sequenceID);
          List<String> userObject = miRNAData.getUserObject();
          for(String data : userObject)
          {
            out.println( "," + data);
            int miRNASequenceCount = miRNAData.getChildCount();
            for ( int miRNASeqNumber = 0; miRNASeqNumber < miRNASequenceCount; miRNASeqNumber++ )
            {
              OutlineNode miRNASequenceData = (OutlineNode) miRNAData.getChildAt( miRNASeqNumber );
              List<String> miRNAStats = miRNASequenceData.getUserObject();
              out.print(",");
              for(String stat : miRNAStats)
              {
                out.print("," + stat );
              }
              out.println();
            }
          }
          //double
          //out.println();
        }
        //Object child = model.getChild( model.g, i );
        //          model.get
      }
//      for ( int i = 0; i < coLIDEResultsTable.getOutline().getModel().getRowCount(); i++ )
//      {
//        
////        for ( int j = 0; j < coLIDEResultsTable.getOutline().getModel().getRowCount(); j++ )
////        {
////
////          out.print( coLIDEResultsTable.getOutline().getValueAt( i, j).toString()  + "," );
////        }
//        out.println();
//      }
    }
    catch ( IOException ex )
    {
      LOGGER.log( Level.SEVERE, null, ex );
    }
    finally
    {
      try
      {
        outCSVFile.close();
        out.close();
      }
      catch ( IOException ex )
      {
        LOGGER.log( Level.SEVERE, null, ex );
      }
    }
  }
}
