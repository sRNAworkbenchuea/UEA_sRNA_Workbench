/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package uk.ac.uea.cmp.srnaworkbench.tools.mircat;

import javax.swing.JFrame;
import javax.swing.JPanel;
import uk.ac.uea.cmp.srnaworkbench.GUIInterface;
import uk.ac.uea.cmp.srnaworkbench.utils.StatusTracker;

/**
 *
 * @author w0445959
 */
public class HairpinGenerateMainFrame extends javax.swing.JInternalFrame implements GUIInterface
{
  public StatusTracker tracker;

  /**
   * Creates new form HairpinGenerateMainFrame
   */
  public HairpinGenerateMainFrame(int size)
  {
    initComponents();

    this.tracker = new StatusTracker( this.hairpinProgress, this.statusLabel );
  
    this.tracker.initKnownRuntime( "Generating RNA plots", size);
 
  }
//  public void beginProcess()
//  {
//    new Thread(new HairpinGenerator(mirCAT_OutputTable, HA_tool, tracker, this)).start();
//  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hairpinProgress = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(120, 120, 120));
        setIconifiable(true);

        statusLabel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(255, 255, 255));
        statusLabel.setText(org.openide.util.NbBundle.getMessage(HairpinGenerateMainFrame.class, "HairpinGenerateMainFrame.statusLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hairpinProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(statusLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(hairpinProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar hairpinProgress;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

  @Override
  public void runProcedure()
  {
    
  }

  @Override
  public JPanel getParamsPanel()
  {
    return new JPanel();
  }

  @Override
  public void setShowingParams( boolean newState )
  {
    
  }

  @Override
  public boolean getShowingParams()
  {
    return false;
  }

  @Override
  public void shutdown()
  {
    
  }
}
