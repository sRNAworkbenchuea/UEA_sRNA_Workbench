/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FilterToolMainFrame.java
 *
 * Created on 09-May-2011, 13:20:35
 */
package uk.ac.uea.cmp.srnaworkbench.tools.tasi;

import java.awt.Color;
import java.io.File;
import java.util.List;

import javax.swing.*;

import uk.ac.uea.cmp.srnaworkbench.*;
import uk.ac.uea.cmp.srnaworkbench.data.sequence.GFFRecord;
import uk.ac.uea.cmp.srnaworkbench.help.JHLauncher;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolHost;
import uk.ac.uea.cmp.srnaworkbench.tools.tasi.Locus.VissrData;
import uk.ac.uea.cmp.srnaworkbench.tools.vissr.*;
import uk.ac.uea.cmp.srnaworkbench.tools.vissr.genoviz.glyph.GFFRecordGlyph;
import uk.ac.uea.cmp.srnaworkbench.utils.*;
import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils.FileExtFilter;
import uk.ac.uea.cmp.srnaworkbench.utils.patman.Patman;

/**
 * Main frame for the tasi prediction tool.
 * @author Dan Mapleson
 */
public final class TasiFrame extends javax.swing.JInternalFrame implements GUIInterface, ToolHost
{
  private TasiRunner t_runner;
  private TasiInputPanel t_input;
  private TasiResultsPanel t_output;
  private GoController go_control;

  /** Creates new form FilterToolMainFrame */
  public TasiFrame()
  {
    initComponents();

    t_runner = new TasiRunner( this );

    t_output = new TasiResultsPanel();

    t_input = new TasiInputPanel();
    t_input.setVisible( true );
    t_input.setEnabled( true );

    this.go_control = new GoController( this.cmdStart, this.cmdCancel, this.mnuRunStart, this.mnuRunCancel );

    setRunningStatus( false );

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout( pnlInput );
    pnlInput.setLayout( mainPanelLayout );
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 0, Short.MAX_VALUE ).addComponent( t_input ) );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 150, Short.MAX_VALUE ).addComponent( t_input ) );

    javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout( pnlResults );
    pnlResults.setLayout( resultsPanelLayout );
    resultsPanelLayout.setHorizontalGroup(
      resultsPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 0, Short.MAX_VALUE ).addComponent( t_output ) );
    resultsPanelLayout.setVerticalGroup(
      resultsPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 293, Short.MAX_VALUE ).addComponent( t_output ) );

    reset();
    
    JHLauncher.setupContextDependentHelp( "HTML_tasi_html", mnuHelpContents, this.getRootPane() );
    
    Tools.trackPage( "TASI Main GUI Frame Class Loaded");
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlInput = new javax.swing.JPanel();
        pnlResults = new javax.swing.JPanel();
        cmdStart = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        progBar = new javax.swing.JProgressBar();
        lblStatus = new javax.swing.JLabel();
        mnuMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuFileExport = new javax.swing.JMenu();
        mnuFileExportTAS = new javax.swing.JMenuItem();
        mnuFileExportTasis = new javax.swing.JMenuItem();
        exportAllLOCIToFASTA = new javax.swing.JMenuItem();
        exportAllIndividualFASTA = new javax.swing.JMenuItem();
        mnuFileSep1 = new javax.swing.JPopupMenu.Separator();
        mnuFileExit = new javax.swing.JMenuItem();
        mnuRun = new javax.swing.JMenu();
        mnuRunStart = new javax.swing.JMenuItem();
        mnuRunCancel = new javax.swing.JMenuItem();
        mnuRunSep1 = new javax.swing.JPopupMenu.Separator();
        mnuRunReset = new javax.swing.JMenuItem();
        mnuView = new javax.swing.JMenu();
        mnuViewVissr = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mnuHelpContents = new javax.swing.JMenuItem();

        setBackground(new java.awt.Color(120, 120, 120));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("ta-si prediction tool");
        setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GUI_Icons/tasi.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                closingFrame(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        pnlInput.setBackground(new java.awt.Color(120, 120, 120));
        pnlInput.setRequestFocusEnabled(false);

        javax.swing.GroupLayout pnlInputLayout = new javax.swing.GroupLayout(pnlInput);
        pnlInput.setLayout(pnlInputLayout);
        pnlInputLayout.setHorizontalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlInputLayout.setVerticalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        pnlResults.setBackground(new java.awt.Color(120, 120, 120));
        pnlResults.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Results:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        javax.swing.GroupLayout pnlResultsLayout = new javax.swing.GroupLayout(pnlResults);
        pnlResults.setLayout(pnlResultsLayout);
        pnlResultsLayout.setHorizontalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlResultsLayout.setVerticalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 293, Short.MAX_VALUE)
        );

        cmdStart.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdStart.setText("Start");
        cmdStart.setToolTipText("<html> Start processing. </html>");
        cmdStart.setEnabled(false);
        cmdStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdStartActionPerformed(evt);
            }
        });

        cmdCancel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdCancel.setText("Cancel");
        cmdCancel.setToolTipText("<html> Cancel process. </html>");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdCancelActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("Status:");

        mnuMain.setBackground(new java.awt.Color(213, 219, 245));

        mnuFile.setText("File");

        mnuFileExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/save.png"))); // NOI18N
        mnuFileExport.setText("Export");
        mnuFileExport.setEnabled(false);

        mnuFileExportTAS.setText("Export TAS loci to CSV");
        mnuFileExportTAS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuFileExportTASActionPerformed(evt);
            }
        });
        mnuFileExport.add(mnuFileExportTAS);

        mnuFileExportTasis.setText("Export tasi to TXT");
        mnuFileExportTasis.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuFileExportTasisActionPerformed(evt);
            }
        });
        mnuFileExport.add(mnuFileExportTasis);

        exportAllLOCIToFASTA.setText("Export all loci to FASTA");
        exportAllLOCIToFASTA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exportAllLOCIToFASTAActionPerformed(evt);
            }
        });
        mnuFileExport.add(exportAllLOCIToFASTA);

        exportAllIndividualFASTA.setText("Export individual to FASTA");
        exportAllIndividualFASTA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exportAllIndividualFASTAActionPerformed(evt);
            }
        });
        mnuFileExport.add(exportAllIndividualFASTA);

        mnuFile.add(mnuFileExport);
        mnuFile.add(mnuFileSep1);

        mnuFileExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/close-tool.png"))); // NOI18N
        mnuFileExit.setText("Close");
        mnuFileExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuFileExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileExit);

        mnuMain.add(mnuFile);

        mnuRun.setText("Run");

        mnuRunStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/light.png"))); // NOI18N
        mnuRunStart.setText("Start");
        mnuRunStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunStartActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunStart);

        mnuRunCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lightCancel.png"))); // NOI18N
        mnuRunCancel.setText("Cancel");
        mnuRunCancel.setEnabled(false);
        mnuRunCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunCancelActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunCancel);
        mnuRun.add(mnuRunSep1);

        mnuRunReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/reload.png"))); // NOI18N
        mnuRunReset.setText("Reset");
        mnuRunReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunResetActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunReset);

        mnuMain.add(mnuRun);

        mnuView.setText("View");

        mnuViewVissr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/bar-chart-02.png"))); // NOI18N
        mnuViewVissr.setText("Show Full Genome View");
        mnuViewVissr.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuViewVissrActionPerformed(evt);
            }
        });
        mnuView.add(mnuViewVissr);

        mnuMain.add(mnuView);

        mnuHelp.setText("Help");

        mnuHelpContents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lookup.png"))); // NOI18N
        mnuHelpContents.setText("Contents");
        mnuHelpContents.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuHelpContentsActionPerformed(evt);
            }
        });
        mnuHelp.add(mnuHelpContents);

        mnuMain.add(mnuHelp);

        setJMenuBar(mnuMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 516, Short.MAX_VALUE)
                        .addComponent(cmdStart, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdStart)
                    .addComponent(cmdCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdStartActionPerformed
    {//GEN-HEADEREND:event_cmdStartActionPerformed
      runProcedure();
    }//GEN-LAST:event_cmdStartActionPerformed

    private void closingFrame(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_closingFrame
    {//GEN-HEADEREND:event_closingFrame
      // TODO add your handling code here:
    }//GEN-LAST:event_closingFrame

    private void mnuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileExitActionPerformed
      cancel();
      dispose();
}//GEN-LAST:event_mnuFileExitActionPerformed

private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
  cancel();
}//GEN-LAST:event_cmdCancelActionPerformed
@Override
  public void shutdown()
  {
     cancel();
   this.dispose();
  }
private void mnuRunStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRunStartActionPerformed
  runProcedure();
}//GEN-LAST:event_mnuRunStartActionPerformed

private void mnuRunCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRunCancelActionPerformed
  cancel();
}//GEN-LAST:event_mnuRunCancelActionPerformed

  private void mnuFileExportTASActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuFileExportTASActionPerformed
  {//GEN-HEADEREND:event_mnuFileExportTASActionPerformed
    File outputFile = FileDialogUtils.showFileSaveDialog( this, FileExtFilter.CSV.getFilter() );
    if ( outputFile != null )
    {
      t_runner.writeLoci( outputFile );
    }
  }//GEN-LAST:event_mnuFileExportTASActionPerformed

  private void mnuFileExportTasisActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuFileExportTasisActionPerformed
  {//GEN-HEADEREND:event_mnuFileExportTasisActionPerformed
    File outputFile = FileDialogUtils.showFileSaveDialog( this, FileExtFilter.TEXT.getFilter() );
    if ( outputFile != null )
    {
      t_runner.writeSrnas( outputFile );
    }
  }//GEN-LAST:event_mnuFileExportTasisActionPerformed

  private void mnuViewVissrActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuViewVissrActionPerformed
  {//GEN-HEADEREND:event_mnuViewVissrActionPerformed
    showInVisSR();
  }//GEN-LAST:event_mnuViewVissrActionPerformed

  private void mnuRunResetActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuRunResetActionPerformed
  {//GEN-HEADEREND:event_mnuRunResetActionPerformed
    reset();
  }//GEN-LAST:event_mnuRunResetActionPerformed

  private void exportAllLOCIToFASTAActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_exportAllLOCIToFASTAActionPerformed
  {//GEN-HEADEREND:event_exportAllLOCIToFASTAActionPerformed
    int[] rows = t_output.getAllRowCount();

    File outputFile = FileDialogUtils.showFileSaveDialog( this, FileDialogUtils.FileExtFilter.FASTA.getFilter() );
    if ( outputFile != null )
    {
      t_output.exportEntireLocus( outputFile, rows );
    }
  }//GEN-LAST:event_exportAllLOCIToFASTAActionPerformed

  private void exportAllIndividualFASTAActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_exportAllIndividualFASTAActionPerformed
  {//GEN-HEADEREND:event_exportAllIndividualFASTAActionPerformed
     int[] rows = t_output.getAllRowCount();

    File outputFile = FileDialogUtils.showFileSaveDialog( this, FileDialogUtils.FileExtFilter.FASTA.getFilter() );
    if ( outputFile != null )
    {
      t_output.exportIndividualSequences( outputFile, rows );
    }
  }//GEN-LAST:event_exportAllIndividualFASTAActionPerformed

    private void mnuHelpContentsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuHelpContentsActionPerformed
    {//GEN-HEADEREND:event_mnuHelpContentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuHelpContentsActionPerformed

  private void showInVisSR()
  {
    TasiParams params = t_input.getParams();

    if ( params == null )
      return;

    List<Locus> results = t_runner.getResults();

    if ( results == null )
      return;

    // Create tiers (+ tasis, TAS locus, -tasis)
    TierParameters tpPosPhased = new TierParameters.Builder( "+ve phased sRNAs" ).build();
    TierParameters tpTAS = new TierParameters.Builder( "Loci" ).glyphBackgroundColour( Color.darkGray ).glyphClass( GFFRecordGlyph.class ).build();
    TierParameters tpNegPhased = new TierParameters.Builder( "-ve phased sRNAs" ).build();
    TierParameters tpAll = new TierParameters.Builder( "All sRNAs in Locus" ).build();
    TierParameters tpUnphased = new TierParameters.Builder( "Unphased sRNAs in Locus" ).build();

    // GFFRecord lists for each tier
    Patman posPhasedItems = new Patman();
    List<GFFRecord> tasItems = CollectionUtils.newArrayList();
    Patman negPhasedItems = new Patman();
    Patman allItems = new Patman();
    Patman unphasedItems = new Patman();

    // Process results, adding to tiers as appropriate
    for( Locus l : results )
    {
      VissrData vd = l.buildVissrData();
      
      tasItems.addAll( vd.getLocusItems() );
      posPhasedItems.addAll( vd.getPosPhasedItems() );
      negPhasedItems.addAll( vd.getNegPhasedItems() );
      allItems.addAll( vd.getAllItems() );
      unphasedItems.addAll(vd.getUnphasedItems());
    }
    
    int max = allItems.getMaxAbundance();
    
    posPhasedItems.setGlyphHeights( max );
    negPhasedItems.setGlyphHeights( max );
    unphasedItems.setGlyphHeights( max );
    
    //allItems.setGlyphHeightFromAbundance();
    allItems.setGlyphHeights( max );
    
    tpPosPhased.addList( posPhasedItems );
    tpTAS.addList( tasItems );
    tpNegPhased.addList( negPhasedItems );
    tpAll.addList( allItems );
    tpUnphased.addList( unphasedItems );

    // Show VisSR...
    SequenceVizMainFrame vissr = SequenceVizMainFrame.createVisSRInstance( params.getGenome(), false, tpPosPhased, tpTAS, tpNegPhased, tpUnphased, tpAll );
    // Focus on the first region of interest
    Locus next = results.iterator().next();
    vissr.displaySequenceRegion( next.getChromosome().trim(), next.getStart() - 5, next.getEnd() + 5 );    
  }

  private void cancel()
  {
    t_runner.cancel();
  }
  
  private void reset()
  {
    t_runner = new TasiRunner( this );
    t_input.reset();
    t_output.resetTable();
  }

  // ***** Start GUIInterface methods *****
  
  @Override
  public void runProcedure()
  {
    File in_file = t_input.getInputFile();

    TasiParams params = t_input.getParams();

    t_runner.runTasiTool( in_file, params, new StatusTracker( this.progBar, this.lblStatus ) );
  }

  @Override public JPanel getParamsPanel()                       {return null;}
  @Override public void setShowingParams( boolean newState ){}
  @Override public boolean getShowingParams()               {return false;}

  // ***** End GUIInterface methods *****
  
  // ***** Start ToolHost methods *****

  @Override
  public void update()
  {
    try
    {
      t_output.populateResults( t_runner.getResults(), t_runner.getParams(), t_input.getParams().getGenome() );
    }
    catch (Exception e)
    {
      showErrorDialog( e.getMessage() );
    }
  }

  @Override
  public void showErrorDialog( String message )
  {
    JOptionPane.showMessageDialog( this,
      message,
      "Tasi Tool Error",
      JOptionPane.ERROR_MESSAGE );
  }

  @Override
  public void setRunningStatus( boolean running )
  {
    if ( this.go_control != null )
    {
      this.go_control.setRunning( running );
      this.t_input.setEnabled( !running );
      this.mnuRunReset.setEnabled( !running );
      
      if (this.t_runner.getResults() != null)
      {
        this.mnuFileExport.setEnabled( !running );
        this.mnuViewVissr.setEnabled( !running );
      }
      else
      {
        this.mnuFileExport.setEnabled( false );
        this.mnuViewVissr.setEnabled( false );
      }      
    }
  }
  
  // ***** End HostTool methods *****
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdStart;
    private javax.swing.JMenuItem exportAllIndividualFASTA;
    private javax.swing.JMenuItem exportAllLOCIToFASTA;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuFileExit;
    private javax.swing.JMenu mnuFileExport;
    private javax.swing.JMenuItem mnuFileExportTAS;
    private javax.swing.JMenuItem mnuFileExportTasis;
    private javax.swing.JPopupMenu.Separator mnuFileSep1;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenuItem mnuHelpContents;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenu mnuRun;
    private javax.swing.JMenuItem mnuRunCancel;
    private javax.swing.JMenuItem mnuRunReset;
    private javax.swing.JPopupMenu.Separator mnuRunSep1;
    private javax.swing.JMenuItem mnuRunStart;
    private javax.swing.JMenu mnuView;
    private javax.swing.JMenuItem mnuViewVissr;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlResults;
    private javax.swing.JProgressBar progBar;
    // End of variables declaration//GEN-END:variables

}
