/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SequenceAlignmentMainFrame.java
 *
 * Created on 25-May-2011, 20:45:46
 */
package uk.ac.uea.cmp.srnaworkbench.tools.sequencealignment;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.text.DefaultFormatterFactory;

import uk.ac.uea.cmp.srnaworkbench.GUIInterface;
import uk.ac.uea.cmp.srnaworkbench.help.JHLauncher;
import uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolHost;
import uk.ac.uea.cmp.srnaworkbench.utils.GoController;
import uk.ac.uea.cmp.srnaworkbench.utils.RegexPatternFormatter;
import uk.ac.uea.cmp.srnaworkbench.utils.StatusTracker;
import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils.FileExtFilter;
import uk.ac.uea.cmp.srnaworkbench.utils.patman.PatmanParams;

import static uk.ac.uea.cmp.srnaworkbench.utils.patman.PatmanParams.Definition.*;
import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;
import static uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils.FileExtFilter.*;
import uk.ac.uea.cmp.srnaworkbench.utils.Tools;

/**
 *
 * @author Matt Stocks and Dan Mapleson
 */
public final class SequenceAlignmentMainFrame extends javax.swing.JInternalFrame implements GUIInterface, ToolHost
{
  private HashMap<String, SARunner> sa_runners = new HashMap<String, SARunner>();
  private GoController go_control;

  /** Creates new form SequenceAlignmentMainFrame */
  public SequenceAlignmentMainFrame()
  {
    initComponents();

    java.util.regex.Pattern numberFilter = java.util.regex.Pattern.compile( "[0-9]*" );
    RegexPatternFormatter numberRegexFormatter = new RegexPatternFormatter( numberFilter );
    numberRegexFormatter.setAllowsInvalid( false );
    DefaultFormatterFactory numberFactory = new DefaultFormatterFactory( numberRegexFormatter );
    
    this.txtMaxGaps.setFormatterFactory( numberFactory );
    this.txtMaxGaps.setText( MAXIMUM_GAPS.getDefault( Integer.class ).toString() );
    
    this.txtMaxMismatches.setFormatterFactory( numberFactory );
    this.txtMaxMismatches.setText( MAXIMUM_MISMATCHES.getDefault( Integer.class ).toString() );
    
    this.txtChunkSize.setFormatterFactory( numberFactory );
    this.txtChunkSize.setText( CHUNK_SIZE.getDefault( Integer.class ).toString() );
    
    this.txtMinLength.setFormatterFactory( numberFactory );
    this.txtMinLength.setText( MINIMUM_SRNA_LENGTH.getDefault( Integer.class ).toString() );
    
    this.txtMaxLength.setFormatterFactory( numberFactory );
    this.txtMaxLength.setText( MAXIMUM_SRNA_LENGTH.getDefault( Integer.class ).toString() );
    
    this.txtMinAbundance.setFormatterFactory( numberFactory );
    this.txtMinAbundance.setText( MINIMUM_SRNA_ABUNDANCE.getDefault( Integer.class ).toString() );

    //this.sa_runner = new SARunner( this );

    this.go_control = new GoController( this.cmdStart, this.cmdCancel, this.mnuStart, this.mnuCancel );
    
    this.setComponentsEnabled( true );
    
    JHLauncher.setupContextDependentHelp( "HTML_seq_align_html", loadHelp, this.getRootPane() );
    

    
    fspShortReads.setToolName( "Sequence Alignment" );
    fspLongReads.setToolName( "Sequence Alignment" );
    fspOutput.setToolName( "Sequence Alignment" );
    
    this.fspShortReads.setFilters( 
      FileExtFilter.toFilterArray( FASTQ, FASTA, RAW_READS ));
    
    this.fspOutput.setFilters( 
      FileExtFilter.toFilterArray( PATMAN ));
    
    this.fspLongReads.setFilters( 
      FileExtFilter.toFilterArray( FASTA ));
  
    int widths[] = {fspShortReads.getLabelWidth(),
    fspLongReads.getLabelWidth(),
    fspOutput.getLabelWidth()};

    int maxWidth = Integer.MIN_VALUE;
    for(int currentWidth : widths)
    {
      if(currentWidth > maxWidth)
        maxWidth = currentWidth;
    }
    fspShortReads.setLabelWidth( maxWidth );
    fspLongReads.setLabelWidth( maxWidth );
    fspOutput.setLabelWidth( maxWidth );
    
    fspShortReads.setFileLineAmount( 20);
    
    Tools.trackPage( "Sequence Alignment Main GUI Frame Loaded");
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        SA_ProgressBar = new javax.swing.JProgressBar();
        cmdCancel = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        cmdStart = new javax.swing.JButton();
        pnlParameters = new javax.swing.JPanel();
        lblMaxGaps = new javax.swing.JLabel();
        txtMaxGaps = new javax.swing.JFormattedTextField();
        lblMaxMismatches = new javax.swing.JLabel();
        txtMaxMismatches = new javax.swing.JFormattedTextField();
        chkPosStrand = new javax.swing.JCheckBox();
        lblChunkSize = new javax.swing.JLabel();
        txtChunkSize = new javax.swing.JFormattedTextField();
        chkNegStrand = new javax.swing.JCheckBox();
        pnlPostProcess = new javax.swing.JPanel();
        lblMinWAbundance = new javax.swing.JLabel();
        txtMinWAbundance = new javax.swing.JFormattedTextField();
        chkPostProcess = new javax.swing.JCheckBox();
        chkPreProcess = new javax.swing.JCheckBox();
        pnlPreProcess = new javax.swing.JPanel();
        lblMinLength = new javax.swing.JLabel();
        lblMaxLength = new javax.swing.JLabel();
        txtMaxLength = new javax.swing.JFormattedTextField();
        txtMinLength = new javax.swing.JFormattedTextField();
        txtMinAbundance = new javax.swing.JFormattedTextField();
        lblMinAbundance = new javax.swing.JLabel();
        fileInputPanel = new javax.swing.JPanel();
        fspShortReads = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();
        fspLongReads = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();
        fspOutput = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        mnuStart = new javax.swing.JMenuItem();
        mnuCancel = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        loadHelp = new javax.swing.JMenuItem();

        setBackground(new java.awt.Color(120, 120, 120));
        setClosable(true);
        setIconifiable(true);
        setTitle("Sequence Alignment");
        setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GUI_Icons/dna.gif"))); // NOI18N

        cmdCancel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdCancel.setText("Cancel");
        cmdCancel.setToolTipText("<html>\nCancel process.\n</html>");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdCancelActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("Status:");

        cmdStart.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdStart.setText("Start");
        cmdStart.setToolTipText("<html>\nStart processing.\n</html>");
        cmdStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdStartActionPerformed(evt);
            }
        });

        pnlParameters.setBackground(new java.awt.Color(120, 120, 120));
        pnlParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parameters:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pnlParameters.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        lblMaxGaps.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblMaxGaps.setForeground(new java.awt.Color(255, 255, 255));
        lblMaxGaps.setText("Max. Gaps Allowed:");

        txtMaxGaps.setText("0");
        txtMaxGaps.setToolTipText("<html>\nThe maximum number of gaps allowed for a hit to be output to the results file. \n</html>");
        txtMaxGaps.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        lblMaxMismatches.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblMaxMismatches.setForeground(new java.awt.Color(255, 255, 255));
        lblMaxMismatches.setText("Max. Mismatches Allowed:");

        txtMaxMismatches.setText("0");
        txtMaxMismatches.setToolTipText("<html>\nThe maximum number of mismatches allowed for a hit to be output to the results file.\n</html>");
        txtMaxMismatches.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        chkPosStrand.setBackground(new java.awt.Color(120, 120, 120));
        chkPosStrand.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        chkPosStrand.setForeground(new java.awt.Color(255, 255, 255));
        chkPosStrand.setText("Search Positive Strand Only");
        chkPosStrand.setToolTipText("If selected the aligner will only try to find matches on the positive strand, otherwise it will try to find matches on both positive and negative strands.");

        lblChunkSize.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblChunkSize.setForeground(new java.awt.Color(255, 255, 255));
        lblChunkSize.setText("Chunk Size:");

        txtChunkSize.setText("3000000");
        txtChunkSize.setToolTipText("<html>\nPatman is a 32-bit application and hence is limited to 2GB process space on some platforms.  In order to help patman run within those limitations the user can specify a chunk size to limit the number of short reads being processed in one go. <br/>\nThe chunk size represents the number of lines in the short read file to process.  If the number of lines in the short read file exceeds this threshold, the file is chunked into files of this size or less.  <br/>\nThe results from each chunk are then processed and later concatenated to produce a final hit list.\n</html>");
        txtChunkSize.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        chkNegStrand.setBackground(new java.awt.Color(120, 120, 120));
        chkNegStrand.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        chkNegStrand.setForeground(new java.awt.Color(255, 255, 255));
        chkNegStrand.setText("Search Negative Strand Only");
        chkNegStrand.setToolTipText("If selected the aligner will only try to find matches on the positive strand, otherwise it will try to find matches on both positive and negative strands.");

        javax.swing.GroupLayout pnlParametersLayout = new javax.swing.GroupLayout(pnlParameters);
        pnlParameters.setLayout(pnlParametersLayout);
        pnlParametersLayout.setHorizontalGroup(
            pnlParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMaxMismatches)
                .addGap(18, 18, 18)
                .addComponent(txtMaxMismatches, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblMaxGaps, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaxGaps, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(pnlParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkPosStrand)
                    .addComponent(chkNegStrand))
                .addGap(27, 27, 27)
                .addComponent(lblChunkSize, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtChunkSize, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlParametersLayout.setVerticalGroup(
            pnlParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParametersLayout.createSequentialGroup()
                .addGroup(pnlParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaxMismatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxMismatches)
                    .addComponent(lblMaxGaps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMaxGaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChunkSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtChunkSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(pnlParametersLayout.createSequentialGroup()
                .addComponent(chkPosStrand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkNegStrand))
        );

        pnlPostProcess.setBackground(new java.awt.Color(120, 120, 120));
        pnlPostProcess.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Post-Processing (filtering):", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pnlPostProcess.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        lblMinWAbundance.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblMinWAbundance.setForeground(new java.awt.Color(255, 255, 255));
        lblMinWAbundance.setText("Min. Weighted Abundance:");

        txtMinWAbundance.setText("0.0");
        txtMinWAbundance.setToolTipText("<html>\nThe minimum weighted abundance for a hit to be entered into the output file. <br/>\nThe weight abundance is the abundance of the short sequence in the short sequence dataset divided by the number of hits to longer sequences.\n</html>");
        txtMinWAbundance.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        javax.swing.GroupLayout pnlPostProcessLayout = new javax.swing.GroupLayout(pnlPostProcess);
        pnlPostProcess.setLayout(pnlPostProcessLayout);
        pnlPostProcessLayout.setHorizontalGroup(
            pnlPostProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPostProcessLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMinWAbundance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMinWAbundance, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPostProcessLayout.setVerticalGroup(
            pnlPostProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPostProcessLayout.createSequentialGroup()
                .addGroup(pnlPostProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMinWAbundance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMinWAbundance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        chkPostProcess.setBackground(new java.awt.Color(120, 120, 120));
        chkPostProcess.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        chkPostProcess.setForeground(new java.awt.Color(255, 255, 255));
        chkPostProcess.setText("Enable Post-Processing");
        chkPostProcess.setToolTipText("<html>\nIf enabled, the results file produced from the sequence aligner will be post-processed in order to filter out unwanted hits.\n</html>");
        chkPostProcess.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkPostProcessActionPerformed(evt);
            }
        });

        chkPreProcess.setBackground(new java.awt.Color(120, 120, 120));
        chkPreProcess.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        chkPreProcess.setForeground(new java.awt.Color(255, 255, 255));
        chkPreProcess.setText("Enable Pre-Processing");
        chkPreProcess.setToolTipText("<html>\nEnables the pre-processing group below, which is used to filter out unwanted sequences from the short reads file before matching.\n</html>");
        chkPreProcess.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkPreProcessActionPerformed(evt);
            }
        });

        pnlPreProcess.setBackground(new java.awt.Color(120, 120, 120));
        pnlPreProcess.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pre-Processing (filtering):", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        pnlPreProcess.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 12)); // NOI18N

        lblMinLength.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblMinLength.setForeground(new java.awt.Color(255, 255, 255));
        lblMinLength.setText("Min. Length:");

        lblMaxLength.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblMaxLength.setForeground(new java.awt.Color(255, 255, 255));
        lblMaxLength.setText("Max. Length:");

        txtMaxLength.setText("0");
        txtMaxLength.setToolTipText("<html> The maximum length for sequences in the sRNA dataset. </html>");
        txtMaxLength.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        txtMinLength.setText("0");
        txtMinLength.setToolTipText("<html> The minimum length for sequences in the sRNA dataset. </html>");
        txtMinLength.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        txtMinAbundance.setText("0");
        txtMinAbundance.setToolTipText("<html>  The minimum abundance for distinct sequences in the sRNA dataset. <br/> The abundance of a given distinct sequence represents the number of duplicates found for that sequence.   </html>");
        txtMinAbundance.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        lblMinAbundance.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblMinAbundance.setForeground(new java.awt.Color(255, 255, 255));
        lblMinAbundance.setText("Min. Abundance:");

        javax.swing.GroupLayout pnlPreProcessLayout = new javax.swing.GroupLayout(pnlPreProcess);
        pnlPreProcess.setLayout(pnlPreProcessLayout);
        pnlPreProcessLayout.setHorizontalGroup(
            pnlPreProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPreProcessLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMinLength)
                .addGap(18, 18, 18)
                .addComponent(txtMinLength, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(lblMinAbundance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMinAbundance, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPreProcessLayout.setVerticalGroup(
            pnlPreProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPreProcessLayout.createSequentialGroup()
                .addGroup(pnlPreProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPreProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMaxLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMinAbundance)
                        .addComponent(txtMinAbundance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlPreProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMinLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMinLength)))
                .addContainerGap())
        );

        fileInputPanel.setBackground(new java.awt.Color(120, 120, 120));

        fspShortReads.setToolTipText("<html>\nThe FastA file containing the short(er) reads.\n</html>");
        fspShortReads.setFilters(FileExtFilter.toFilterArray(FileExtFilter.FASTA));
        fspShortReads.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        fspShortReads.setHistorySingleMode(false);
        fspShortReads.setHistoryType(uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType.SRNA);
        fspShortReads.setLabel("Short Reads File Path:");
        fspShortReads.setLabelWidth(130);
        fspShortReads.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.MULTI_LOAD);

        fspLongReads.setToolTipText("<html>The FastA file containing the long(er) reads to match against.</html>");
        fspLongReads.setFilters(FileExtFilter.toFilterArray(FileExtFilter.FASTA));
        fspLongReads.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        fspLongReads.setHistorySingleMode(true);
        fspLongReads.setHistoryType(uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType.GENOME);
        fspLongReads.setLabel("Long Reads File Path:");
        fspLongReads.setLabelWidth(130);
        fspLongReads.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.LOAD);

        fspOutput.setToolTipText("<html>The path to the file which will contain the match information.</html>");
        fspOutput.setFilters(FileExtFilter.toFilterArray(FileExtFilter.PATMAN));
        fspOutput.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        fspOutput.setHistorySingleMode(true);
        fspOutput.setHistoryType(uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType.SRNA);
        fspOutput.setLabel("Output Directory:");
        fspOutput.setLabelWidth(130);
        fspOutput.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.DIRECTORY);

        javax.swing.GroupLayout fileInputPanelLayout = new javax.swing.GroupLayout(fileInputPanel);
        fileInputPanel.setLayout(fileInputPanelLayout);
        fileInputPanelLayout.setHorizontalGroup(
            fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fspLongReads, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fspOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fspShortReads, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        fileInputPanelLayout.setVerticalGroup(
            fileInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInputPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(fspShortReads, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fspLongReads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fspOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBar.setBackground(new java.awt.Color(213, 219, 245));

        fileMenu.setText("File");

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/close-tool.png"))); // NOI18N
        exitMenuItem.setText("Close");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        runMenu.setText("Run");

        mnuStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/light.png"))); // NOI18N
        mnuStart.setText("Start");
        mnuStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuStartActionPerformed(evt);
            }
        });
        runMenu.add(mnuStart);

        mnuCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lightCancel.png"))); // NOI18N
        mnuCancel.setText("Cancel");
        mnuCancel.setEnabled(false);
        mnuCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuCancelActionPerformed(evt);
            }
        });
        runMenu.add(mnuCancel);

        menuBar.add(runMenu);

        helpMenu.setText("Help");

        loadHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lookup.png"))); // NOI18N
        loadHelp.setText("Contents");
        helpMenu.add(loadHelp);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkPostProcess)
                        .addGap(673, 673, 673))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(pnlPostProcess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cmdStart, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SA_ProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlPreProcess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlParameters, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkPreProcess)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(chkPreProcess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPreProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(chkPostProcess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPostProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SA_ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmdStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmdCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdCancelActionPerformed
    {//GEN-HEADEREND:event_cmdCancelActionPerformed
      cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    @Override
  public void shutdown()
  {
   cancel();
   dispose();
  }
private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
   shutdown();
}//GEN-LAST:event_exitMenuItemActionPerformed

private void cmdStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStartActionPerformed
  runProcedure();
}//GEN-LAST:event_cmdStartActionPerformed

  private void chkPostProcessActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_chkPostProcessActionPerformed
  {//GEN-HEADEREND:event_chkPostProcessActionPerformed
    setPostProcessEnabled( chkPostProcess.isSelected() );
  }//GEN-LAST:event_chkPostProcessActionPerformed

  private void chkPreProcessActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_chkPreProcessActionPerformed
  {//GEN-HEADEREND:event_chkPreProcessActionPerformed
    setPreProcessEnabled( chkPreProcess.isSelected() );
  }//GEN-LAST:event_chkPreProcessActionPerformed

  private void mnuStartActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuStartActionPerformed
  {//GEN-HEADEREND:event_mnuStartActionPerformed
    runProcedure();
  }//GEN-LAST:event_mnuStartActionPerformed

  private void mnuCancelActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuCancelActionPerformed
  {//GEN-HEADEREND:event_mnuCancelActionPerformed
    cancel();
  }//GEN-LAST:event_mnuCancelActionPerformed

  private void setPreProcessEnabled( boolean enabled )
  {
    this.pnlPreProcess.setEnabled( enabled );
    this.lblMinLength.setEnabled( enabled );
    this.txtMinLength.setEnabled( enabled );
    this.lblMaxLength.setEnabled( enabled );
    this.txtMaxLength.setEnabled( enabled );
    this.lblMinAbundance.setEnabled( enabled );
    this.txtMinAbundance.setEnabled( enabled );
  }
  
  
  private void setPostProcessEnabled( boolean enabled )
  {
    this.pnlPostProcess.setEnabled( enabled );
    this.lblMinWAbundance.setEnabled( enabled );
    this.txtMinWAbundance.setEnabled( enabled );
  }
  
  private void setComponentsEnabled( boolean enabled )
  {
    this.fspShortReads.setEnabled( enabled );
    this.fspLongReads.setEnabled( enabled );
    this.fspOutput.setEnabled( enabled );
    
    this.lblMaxMismatches.setEnabled( enabled );
    this.txtMaxMismatches.setEnabled( enabled );
    this.lblMaxGaps.setEnabled( enabled );
    this.txtMaxGaps.setEnabled( enabled );
    this.chkPosStrand.setEnabled( enabled );
    this.chkNegStrand.setEnabled( enabled );
    this.lblChunkSize.setEnabled( enabled );
    this.txtChunkSize.setEnabled( enabled );
    
    if (enabled)
    {
      setPostProcessEnabled( this.chkPostProcess.isSelected() );
      setPreProcessEnabled( this.chkPreProcess.isSelected() );
    }
  }
  
  
  private PatmanParams createParamsFromGUI()
  {
    String min_len_str = this.txtMinLength.getText().trim();
    String max_len_str = this.txtMaxLength.getText().trim();
    String min_abd_str = this.txtMinAbundance.getText().trim();
    
    String max_mismatch_str = this.txtMaxMismatches.getText().trim();
    String max_gaps_str = this.txtMaxGaps.getText().trim();
    String chunks_str = this.txtChunkSize.getText().trim();
    
    String min_wabd_str = this.txtMinWAbundance.getText().trim();

    int min_len = min_len_str.length() > 0 ? Integer.parseInt(min_len_str) : MINIMUM_SRNA_LENGTH.getDefault(Integer.class);
    int max_len = max_len_str.length() > 0 ? Integer.parseInt(max_len_str) : MAXIMUM_SRNA_LENGTH.getDefault(Integer.class);
    int min_abd = min_abd_str.length() > 0 ? Integer.parseInt(min_abd_str) : MINIMUM_SRNA_ABUNDANCE.getDefault(Integer.class);
    
    int max_mismatch = max_mismatch_str.length() > 0 ? Integer.parseInt(max_mismatch_str) : MAXIMUM_MISMATCHES.getDefault(Integer.class);
    int max_gaps = max_gaps_str.length() > 0 ? Integer.parseInt(max_gaps_str) : MAXIMUM_GAPS.getDefault(Integer.class);
    int chunks = chunks_str.length() > 0 ? Integer.parseInt(chunks_str) : CHUNK_SIZE.getDefault(Integer.class);
    
    double min_wabd = min_wabd_str.length() > 0 ? Double.parseDouble(min_wabd_str) : MINIMUM_WEIGHTED_ABUNDANCE.getDefault(Double.class);
    
    boolean pre_process = this.chkPreProcess.isSelected();
    boolean post_process = this.chkPostProcess.isSelected();
    
    PatmanParams params = new PatmanParams.Builder()
      .setMaxMismatches( max_mismatch )
      .setMaxGaps( max_gaps )
      .setPositiveStrandOnly( this.chkPosStrand.isSelected() )
      .setNegativeStrandOnly( this.chkNegStrand.isSelected() )
      .setChunkSize( chunks )
      .setPreProcess( pre_process )
      .setPostProcess( post_process )
      .build();
    
    if (pre_process)
    {
      params.setSRNALengthRange( min_len, max_len );
      params.setMinSRNAAbundance( min_abd );
    }
    
    if (post_process)
    {
      params.setMinWeightedAbundance( min_wabd );
    }      
    
    return params;
  }
  
  private void cancel()
  {
    for(Entry<String, SARunner> entry : sa_runners.entrySet())
        entry.getValue().cancel();
  }
  
  // ***** Start GUIInterface methods *****  
    
  @Override
  public void runProcedure()
  {
    ArrayList<File> short_read_files = this.fspShortReads.getFiles();
    File long_reads = this.fspLongReads.getFile();
    File output_dir = this.fspOutput.getFile();

    PatmanParams pp = createParamsFromGUI();
    pp.setMaxReportedHits(Integer.MAX_VALUE);
    
    
//    LOGGER.log( Level.INFO,  + "Starting job: Short Reads: {0}; Long Reads: {1}; Out: {2}; Params: {3}", 
//      new Object[]{short_reads.getPath(), long_reads.getPath(), output.getPath(), pp.toString()} );
    this.SA_ProgressBar.setMaximum( short_read_files.size());
    this.lblStatus.setText( "Status: Aligning Data...");
    for(File inputFile : short_read_files)
    {
      SARunner newRunner = new SARunner(this);
      newRunner.runSequenceAligner( inputFile, long_reads, output_dir, pp, null );
      this.sa_runners.put( inputFile.getName(), newRunner);
    }
  }

  @Override public JPanel getParamsPanel()                       {return null;}
  @Override public void setShowingParams( boolean newState ){}
  @Override public boolean getShowingParams()               {return false;}
  
  // ***** End GUIInterface methods *****

  // ***** Start ToolHost methods *****
  
  @Override
  public void update()
  {
       try
    {
      
      ArrayList<File> in_file = fspShortReads.getFiles();
      boolean allComplete = true;
      for(File theInput : in_file)
      {
        SARunner getTrigger = sa_runners.get( theInput.getName() );
        if ( getTrigger.isComplete() )
        {
          lblStatus.setText( "Status: Completed: " + theInput.getName() );
          SA_ProgressBar.setValue( SA_ProgressBar.getValue()+1 );
          
        }
        else
        {
          allComplete = false;
        }
      }
      if(allComplete)
      {
        this.lblStatus.setText( "Status: All Files Completed Successfully");
        SA_ProgressBar.setValue( 0 );
      }
    }
    catch (Exception e)
    {
      showErrorDialog( e.getMessage() );
    }
  }

  @Override
  public void setRunningStatus( boolean running )
  {
    if ( this.go_control != null )
    {
      this.go_control.setRunning( running );
      
      setComponentsEnabled( !running );
    }
  }

  @Override
  public void showErrorDialog( String message )
  {
    JOptionPane.showMessageDialog( this,
        message,
        "Sequence Alignment Error",
        JOptionPane.ERROR_MESSAGE );
  }
  
  // ***** End ToolHost methods *****
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar SA_ProgressBar;
    private javax.swing.JCheckBox chkNegStrand;
    private javax.swing.JCheckBox chkPosStrand;
    private javax.swing.JCheckBox chkPostProcess;
    private javax.swing.JCheckBox chkPreProcess;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdStart;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JPanel fileInputPanel;
    private javax.swing.JMenu fileMenu;
    private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel fspLongReads;
    private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel fspOutput;
    private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel fspShortReads;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel lblChunkSize;
    private javax.swing.JLabel lblMaxGaps;
    private javax.swing.JLabel lblMaxLength;
    private javax.swing.JLabel lblMaxMismatches;
    private javax.swing.JLabel lblMinAbundance;
    private javax.swing.JLabel lblMinLength;
    private javax.swing.JLabel lblMinWAbundance;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenuItem loadHelp;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mnuCancel;
    private javax.swing.JMenuItem mnuStart;
    private javax.swing.JPanel pnlParameters;
    private javax.swing.JPanel pnlPostProcess;
    private javax.swing.JPanel pnlPreProcess;
    private javax.swing.JMenu runMenu;
    private javax.swing.JFormattedTextField txtChunkSize;
    private javax.swing.JFormattedTextField txtMaxGaps;
    private javax.swing.JFormattedTextField txtMaxLength;
    private javax.swing.JFormattedTextField txtMaxMismatches;
    private javax.swing.JFormattedTextField txtMinAbundance;
    private javax.swing.JFormattedTextField txtMinLength;
    private javax.swing.JFormattedTextField txtMinWAbundance;
    // End of variables declaration//GEN-END:variables

}
