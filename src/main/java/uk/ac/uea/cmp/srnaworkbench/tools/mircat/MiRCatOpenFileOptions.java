/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MiRCatOpenFileOptions.java
 *
 * Created on 27-Apr-2011, 12:01:24
 */
package uk.ac.uea.cmp.srnaworkbench.tools.mircat;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FilenameUtils;
import static org.apache.commons.io.IOUtils.DIR_SEPARATOR;
import uk.ac.uea.cmp.srnaworkbench.history.HistoryBrowser;
import uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType;
import uk.ac.uea.cmp.srnaworkbench.swing.FileSelector;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolHost;
import uk.ac.uea.cmp.srnaworkbench.tools.adaptorremover.AdaptorRemoverInputPanel;
import uk.ac.uea.cmp.srnaworkbench.tools.adaptorremover.AdaptorRemoverResultsPanel;
import uk.ac.uea.cmp.srnaworkbench.tools.adaptorremover.AdaptorRemoverRunner;
import uk.ac.uea.cmp.srnaworkbench.tools.filter.FilterInputPanel;
import uk.ac.uea.cmp.srnaworkbench.tools.filter.FilterResultsPanel;
import uk.ac.uea.cmp.srnaworkbench.tools.filter.FilterRunner;
import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils;
import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils.FileExtFilter;
import uk.ac.uea.cmp.srnaworkbench.utils.StatusTracker;
import uk.ac.uea.cmp.srnaworkbench.utils.Tools;

/**
 *
 * @author w0445959
 */
public final class MiRCatOpenFileOptions extends javax.swing.JDialog implements ActionListener, ToolHost
{
  private File initialTempDir;
  private File processed_sRNA_File;
  private int myResult; 
  
  // ***** Adaptor remover handler *****
  private AdaptorRemoverRunner ar_runner;
  private AdaptorRemoverInputPanel ar_input;
  private AdaptorRemoverResultsPanel ar_output;
  
  // temp file used for all in place pre-processing of data
  private File pp_temp_dir;
  
  // ***** Filter handler *****
  private FilterRunner f_runner;
  private FilterInputPanel f_input;
  private FilterResultsPanel f_output;

  /** Creates new form MiRCatOpenFileOptions */
  public MiRCatOpenFileOptions( JFrame parent, String title, String message )
  {
    //super("Modal Popup", false, true, false, false);
    super( parent, title, true );

    initComponents();

    // Init class state
    this.initialTempDir = Tools.getNextDirectory();
    this.processed_sRNA_File = null;
    this.myResult = JOptionPane.CANCEL_OPTION;
    
    // Init adaptor remover
    ar_runner = new AdaptorRemoverRunner( this, JOptionPane.NO_OPTION );
    ar_input = new AdaptorRemoverInputPanel();
    ar_output = new AdaptorRemoverResultsPanel();
    
    // Init filter
    f_runner = new FilterRunner( this );
    f_input = new FilterInputPanel();
    f_output = new FilterResultsPanel();
    
    // Init panes
    this.AR_ScrollPane.setViewportView( ar_input );
    this.filterScrollPane.setViewportView( f_input );
    
    // Disable the file io boxes in ar_input and f_input.
    ar_input.setIOPanelEnabled( false );
    f_input.setIOPanelEnabled( false );
    f_input.setMakeRedundantEnabled( false );
    f_input.setMakeRedundant( true );
    
    int widths[] = {srnaSelectorPanel.getLabelWidth(),
    genomeSelectorPanel.getLabelWidth(),
    tempSelectorPanel.getLabelWidth()};

    int maxWidth = Integer.MIN_VALUE;
    for(int currentWidth : widths)
    {
      if(currentWidth > maxWidth)
        maxWidth = currentWidth;
    }
    srnaSelectorPanel.setLabelWidth( maxWidth );
    genomeSelectorPanel.setLabelWidth( maxWidth );
    tempSelectorPanel.setLabelWidth( maxWidth );
    this.invalidate();
    
    srnaSelectorPanel.setHistoryType( HistoryFileType.SRNA);
    genomeSelectorPanel.setHistoryType( HistoryFileType.GENOME);
    tempSelectorPanel.setHistoryType( HistoryFileType.TEMP);
    
    srnaSelectorPanel.setFilters( new FileNameExtensionFilter[]{FileExtFilter.FASTA.getFilter(), FileExtFilter.PATMAN.getFilter()});
    genomeSelectorPanel.setFilters( new FileNameExtensionFilter[]{FileExtFilter.FASTA.getFilter()});
    

    
    //updateTempFiles();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    fileOpenOptionTabs = new javax.swing.JTabbedPane();
    AR_ScrollPane = new javax.swing.JScrollPane();
    filterScrollPane = new javax.swing.JScrollPane();
    jPanel1 = new javax.swing.JPanel();
    continueButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    chkRemoveAdaptors = new javax.swing.JCheckBox();
    chkFilter = new javax.swing.JCheckBox();
    srnaSelectorPanel = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();
    genomeSelectorPanel = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();
    tempSelectorPanel = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();

    setBackground(new java.awt.Color(120, 120, 120));
    setMinimumSize(new java.awt.Dimension(840, 670));

    fileOpenOptionTabs.setBackground(new java.awt.Color(120, 120, 120));
    fileOpenOptionTabs.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
    fileOpenOptionTabs.addTab("Adapter Removal Options", AR_ScrollPane);
    fileOpenOptionTabs.addTab("Filter Tool Options", filterScrollPane);

    jPanel1.setBackground(new java.awt.Color(120, 120, 120));
    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

    continueButton.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
    continueButton.setText("OK");
    continueButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        continueButtonActionPerformed(evt);
      }
    });

    cancelButton.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButtonActionPerformed(evt);
      }
    });

    chkRemoveAdaptors.setBackground(new java.awt.Color(120, 120, 120));
    chkRemoveAdaptors.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
    chkRemoveAdaptors.setForeground(new java.awt.Color(255, 255, 255));
    chkRemoveAdaptors.setText("Remove Adaptors");
    chkRemoveAdaptors.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        chkRemoveAdaptorsActionPerformed(evt);
      }
    });

    chkFilter.setBackground(new java.awt.Color(120, 120, 120));
    chkFilter.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
    chkFilter.setForeground(new java.awt.Color(255, 255, 255));
    chkFilter.setText("Filter Input");
    chkFilter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        chkFilterActionPerformed(evt);
      }
    });

    srnaSelectorPanel.setHistorySingleMode(true);
    srnaSelectorPanel.setHistoryType(uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType.SRNA);
    srnaSelectorPanel.setLabel("Specify sRNA File (mandatory): ");
    srnaSelectorPanel.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.LOAD);
    srnaSelectorPanel.setToolName("miRCat");

    genomeSelectorPanel.setHistorySingleMode(true);
    genomeSelectorPanel.setHistoryType(uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType.GENOME);
    genomeSelectorPanel.setLabel("Specify Genome File (mandatory): ");
    genomeSelectorPanel.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.LOAD);
    genomeSelectorPanel.setToolName("miRCat");

    tempSelectorPanel.setHistorySingleMode(true);
    tempSelectorPanel.setHistoryType(uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType.TEMP);
    tempSelectorPanel.setLabel("Specify Temporary Directory (Optional): ");
    tempSelectorPanel.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.DIRECTORY);
    tempSelectorPanel.setToolName("miRCat");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(chkRemoveAdaptors)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(chkFilter)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 340, Short.MAX_VALUE)
            .addComponent(continueButton)
            .addGap(5, 5, 5)
            .addComponent(cancelButton)
            .addGap(14, 14, 14))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(genomeSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(srnaSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(tempSelectorPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(srnaSelectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(genomeSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(tempSelectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(continueButton)
          .addComponent(cancelButton)
          .addComponent(chkRemoveAdaptors)
          .addComponent(chkFilter))
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(fileOpenOptionTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(fileOpenOptionTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void continueButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_continueButtonActionPerformed
    {//GEN-HEADEREND:event_continueButtonActionPerformed
      
      
      if ( ( this.srnaSelectorPanel.getFile() != null && 
        this.genomeSelectorPanel.getFile() != null ) 
        && ar_input.getConfig() && f_input.getConfig() )
      {
        updateTempFiles();
        updatePipelinePaths();
        setVisible( false );
        myResult = JOptionPane.OK_OPTION;
      }
      else if(this.srnaSelectorPanel.getFile() == null && this.genomeSelectorPanel.getFile() == null)
      {
        JOptionPane.showMessageDialog( this,
          "Must specify an sRNA file and a genome file to continue.",
          "Configuration error",
          JOptionPane.ERROR_MESSAGE );
      }
      else if(this.genomeSelectorPanel.getFile() == null)
      {
        JOptionPane.showMessageDialog( this,
          "Must specify a genome file to continue.",
          "Configuration error",
          JOptionPane.ERROR_MESSAGE );
      }
      else if(this.srnaSelectorPanel.getFile() == null)
      {
        JOptionPane.showMessageDialog( this,
          "Must specify an sRNA file to continue.",
          "Configuration error",
          JOptionPane.ERROR_MESSAGE );
      }
    }//GEN-LAST:event_continueButtonActionPerformed

  public int getValue()
  {
    return myResult;
  }

  /**
   * Executes user requested pre-processing tasks
   * @param tracker Status tracker for monitoring progress
   */
  public void runProcedures( StatusTracker tracker )
  {
    
    if ( isRemovingAdaptors() && isFiltering() )
    {
      runAR( tracker );
      runFilter( tracker );
    }
    else if ( isRemovingAdaptors() && !isFiltering() )
    {
      runAR( tracker );
    }
    else if ( !isRemovingAdaptors() && isFiltering() )
    {
      runFilter( tracker );
    }
    else
    {
      // Do nothing if no pre-processing was requested.
    }     
  }
  
  private void runAR( StatusTracker tracker )
  {
    // Not sure if this is the best way of handling this but we can improve it later
    // if necessary.
    ar_runner.runAdaptorRemover( ar_input.getInputFile(), ar_input.getOutputDir(), ar_input.getParams(), tracker );
    while ( ar_runner.getActive() ) {}
    ar_output.fillExecutionStatsTable( ar_runner.getResults() );
    ar_output.fillLengthDistTable( ar_runner.getLengths() );
  }
  
  private void runFilter( StatusTracker tracker )
  {
    // Not sure if this is the best way of handling this but we can improve it later
    // if necessary.
    f_runner.runFilterTool( f_input.getInputFile(), f_input.getOutputFile(), f_input.getParams(), JOptionPane.NO_OPTION, tracker );
    while ( f_runner.getActive() ) {}
    f_output.fillResultsTable( f_runner.getResults() );
  }

  @Override
  public void actionPerformed( ActionEvent e )
  {
    setVisible( false );
    dispose();
  }

  /**
   * Returns true if the user has requested to remove adaptors from the sRNA data
   * as a pre-processing step.
   * @return 
   */
  public boolean isRemovingAdaptors()
  {
    return ar_input.isEnabled();
  }

  /**
   * Returns true if user has requested to filter the sRNA data as a pre=processing step.
   * @return 
   */
  public boolean isFiltering()
  {
    return f_input.isEnabled();
  }
  
  /**
   * Returns true if either the adaptor removal step or filter step have been enabled
   * for pre-processing.
   * @return 
   */
  public boolean isPreProcessing()
  {
    return this.ar_input.isEnabled() || this.f_input.isEnabled();
  }

  /**
   * Gets the genome file specified by the user.
   * @return The genome file as a File object, or null if nothing specified.
   */
  public File getGenomeFile()
  {
    
    return this.genomeSelectorPanel.getFile();
  }

  /**
   * Gets the sRNA file specified by the user.
   * @return The sRNA file as a File object, or null if nothing specified.
   */
  public File getSRNAFile()
  {
    
    return this.srnaSelectorPanel.getFile();
  }
  
  /**
   * Gets the temp dir specified by the user.
   * @return The temp dir as a File object, or null if nothing specified.
   */
  public File getTempDir()
  {
    String tempPath = this.tempSelectorPanel.getFile() == null ? this.initialTempDir.getPath() : this.tempSelectorPanel.getFile().getAbsolutePath();
    return new File(tempPath);
  }

  /**
   * Gets the name of the pre-processed file specified by the user.  This may be
   * either the sRNA file, the file resulting from adaptor removal, or the file
   * resulting from filtering, depending on what pre-processing options the user
   * selected.
   * @return The pre-processed file for use by miRCat as a File object, or null 
   * if no sRNA file has been selected by the user.
   */
  public File getProcessedSRNAFile()
  {
    // If the user has not selected a file to process then it doesn't matter if
    // there's anything in the processed_sRNA_File variable or not.
    if ( getSRNAFile() == null )
      return null;
    
    return processed_sRNA_File;
  }

  /**
   * Retrieves the filtering results
   * @return The filtering results
   */
  public FilterResultsPanel getFilterResultsPanel()
  {
    return f_output;
  }

  /**
   * Retrieves the Adaptor removal results
   * @return The adaptor removal results
   */
  public AdaptorRemoverResultsPanel getARResultsPanel()
  {
    return ar_output;
  }

  //***** ToolHost methods *****
  
  @Override
  public void update()
  {
    // No need to do anything in here as this dialog doesn't actually execute the
    // pre-processing steps.
    // Does this dialog need to implement ToolHost?
    // Maybe MirCatMainFrame should implement ToolHost instead?
  }

  @Override
  public void setRunningStatus( boolean running )
  {
    // No need to do anything in here as this dialog doesn't actually execute the
    // pre-processing steps.
    // Does this dialog need to implement ToolHost?
    // Maybe MirCatMainFrame should implement ToolHost instead?
  }

  @Override
  public void showErrorDialog( String message )
  {
    JOptionPane.showMessageDialog( this,
      message,
      "Pre-processing error",
      JOptionPane.ERROR_MESSAGE );
  }
  
  // ***** End ToolHost methods *****
  
  
  private void updateTempFiles()
  {
  
    
    // If no temp directory is specified used the one that was created by the system.
    String tempPath = this.tempSelectorPanel.getFile() == null ? this.initialTempDir.getPath() : this.tempSelectorPanel.getFile().getAbsolutePath();
    
    pp_temp_dir = new File( tempPath  );

  }
  
  private void updatePipelinePaths()
  {
    String srnaPath = this.srnaSelectorPanel.getFile().getAbsolutePath().trim();
    String sRNAFileName = srnaSelectorPanel.getFile().getName();
    
    
    if ( isRemovingAdaptors() && isFiltering() )
    {
      ar_input.setTextInput( srnaPath, pp_temp_dir.getAbsolutePath());
      //reconstruct the filename that would be generated by the adapter removal runner
      String adaptersRemovedFilePath = pp_temp_dir.getAbsolutePath() + DIR_SEPARATOR + FilenameUtils.removeExtension( sRNAFileName ) + "_AR.fa";
    
      //now populate the filter tool with that new file name
      f_input.setTextInput( adaptersRemovedFilePath, pp_temp_dir.getAbsolutePath() );
      
      //reconstruct the filename that wouldve been created by the filter runner and set that to be the final sRNA file
      processed_sRNA_File =  new File(FilenameUtils.removeExtension( adaptersRemovedFilePath ) + "_filter.fa");
    }
    else if (isRemovingAdaptors() && !isFiltering() )
    {
      ar_input.setTextInput( srnaPath, pp_temp_dir.getAbsolutePath() );
      f_input.setTextInput( "", "" );
      //reconstruct the filename that would be generated by the adapter removal runner
      String adaptersRemovedFilePath = pp_temp_dir.getAbsolutePath() + DIR_SEPARATOR + FilenameUtils.removeExtension( sRNAFileName ) + "_AR.fa";
 
      processed_sRNA_File =  new File(adaptersRemovedFilePath);
    }
    else if (!isRemovingAdaptors() && isFiltering() )
    {
      ar_input.setTextInput( "", "" );
      f_input.setTextInput( srnaPath, pp_temp_dir.getAbsolutePath() );
      
      //reconstruct the filename that would be generated by the filter runner
      String filteredFilePath = pp_temp_dir.getAbsolutePath() + DIR_SEPARATOR + FilenameUtils.removeExtension( sRNAFileName ) + "_filter.fa";
 
      processed_sRNA_File =  new File(filteredFilePath);
    }
    else
    {
      processed_sRNA_File = srnaPath.isEmpty() ? null : new File( srnaPath );
    }
  }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed

      setVisible( false );
      myResult = JOptionPane.CANCEL_OPTION;
      dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed


private void chkRemoveAdaptorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRemoveAdaptorsActionPerformed

  if ( this.srnaSelectorPanel.getFile() != null )
  {
    this.ar_input.setEnabled( chkRemoveAdaptors.isSelected() );

    this.ar_input.setIOPanelEnabled( false );

    updateTempFiles();
    updatePipelinePaths();
  }
  else
  {

    JOptionPane.showMessageDialog( this,
          "Please first specify an sRNA file to enable Adapter Removal.",
          "Configuration error",
          JOptionPane.ERROR_MESSAGE );
    chkRemoveAdaptors.setSelected( false );
  }
}//GEN-LAST:event_chkRemoveAdaptorsActionPerformed

private void chkFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFilterActionPerformed

  if ( this.srnaSelectorPanel.getFile() != null )
  {
    this.f_input.setEnabled( chkFilter.isSelected() );

    this.f_input.setIOPanelEnabled( false );
    this.f_input.setMakeRedundantEnabled( false );
    this.f_input.setMakeRedundant( true );

    updateTempFiles();
    updatePipelinePaths();
  }
  else
  {

    JOptionPane.showMessageDialog( this,
      "Please first specify an sRNA file to enable Filtering.",
      "Configuration error",
      JOptionPane.ERROR_MESSAGE );
    chkFilter.setSelected( false );
  }
}//GEN-LAST:event_chkFilterActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane AR_ScrollPane;
  private javax.swing.JButton cancelButton;
  private javax.swing.JCheckBox chkFilter;
  private javax.swing.JCheckBox chkRemoveAdaptors;
  private javax.swing.JButton continueButton;
  private javax.swing.JTabbedPane fileOpenOptionTabs;
  private javax.swing.JScrollPane filterScrollPane;
  private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel genomeSelectorPanel;
  private javax.swing.JPanel jPanel1;
  private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel srnaSelectorPanel;
  private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel tempSelectorPanel;
  // End of variables declaration//GEN-END:variables
}
