/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FilterMainFrame.java
 *
 * Created on 09-May-2011, 13:20:35
 */
package uk.ac.uea.cmp.srnaworkbench.tools.filter;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.logging.Level;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FilenameUtils;

import uk.ac.uea.cmp.srnaworkbench.help.JHLauncher;
import uk.ac.uea.cmp.srnaworkbench.GUIInterface;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolHost;
import uk.ac.uea.cmp.srnaworkbench.utils.GoController;
import uk.ac.uea.cmp.srnaworkbench.utils.StatusTracker;

import static org.apache.commons.io.IOUtils.DIR_SEPARATOR;
import static org.apache.commons.io.IOUtils.LINE_SEPARATOR;

import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;
import uk.ac.uea.cmp.srnaworkbench.utils.Tools;
import uk.ac.uea.cmp.srnaworkbench.viewers.AbundanceDistributionViewer;

/**
 * Main frame for the stand-alone filter tool.
 * @author Dan Mapleson and Matthew Stocks
 */
public final class FilterMainFrame extends javax.swing.JInternalFrame implements GUIInterface, ToolHost
{
  // The engines
  private HashMap<String, FilterRunner> f_runners = new HashMap<String, FilterRunner>();
  
  // Extra GUI components for this tool
  private FilterInputPanel f_input;
  private FilterResultsPanel f_output;
  private GoController go_control;
  private StatusTracker tracker;
  private boolean filesIgnored = false;
  private ArrayList<File> in_files;
  private int showingAbundancePlots;

  /** Creates new form FilterMainFrame */
  public FilterMainFrame()
  {
    initComponents();
    
    

    this.go_control = new GoController( this.cmdStart, this.cmdCancel, this.mnuRunStart, this.mnuRunCancel );
    this.tracker = new StatusTracker( this.progBar, this.lblStatus );
    
    this.f_output = new FilterResultsPanel();
    
    this.f_input = new FilterInputPanel();
    this.f_input.setEnabled( true );
    this.f_input.setVisible( true );
    
    setRunningStatus(false);
    
    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout( pnlInput );
    pnlInput.setLayout( mainPanelLayout );
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 648, Short.MAX_VALUE ).addComponent( f_input ) );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 284, Short.MAX_VALUE ).addComponent( f_input ) );

    javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout( pnlResults );
    pnlResults.setLayout( resultsPanelLayout );
    resultsPanelLayout.setHorizontalGroup(
      resultsPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 648, Short.MAX_VALUE ).addComponent( f_output ) );
    resultsPanelLayout.setVerticalGroup(
      resultsPanelLayout.createParallelGroup( javax.swing.GroupLayout.Alignment.LEADING ).addGap( 0, 118, Short.MAX_VALUE ).addComponent( f_output ) );

    JHLauncher.setupContextDependentHelp( "HTML_filter_html", mnuHelpContents, this.getRootPane() );
    
    Tools.trackPage( "Filter Main GUI Frame Loaded");
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        pnlResults = new javax.swing.JPanel();
        pnlInput = new javax.swing.JPanel();
        cmdStart = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        progBar = new javax.swing.JProgressBar();
        lblStatus = new javax.swing.JLabel();
        mnuMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuFileExit = new javax.swing.JMenuItem();
        mnuRun = new javax.swing.JMenu();
        mnuRunStart = new javax.swing.JMenuItem();
        mnuRunCancel = new javax.swing.JMenuItem();
        mnuRunSep1 = new javax.swing.JPopupMenu.Separator();
        mnuRunReset = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mnuHelpContents = new javax.swing.JMenuItem();

        setBackground(new java.awt.Color(120, 120, 120));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Filter");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GUI_Icons/filter-256.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                closingFrame(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(120, 120, 120));

        pnlResults.setBackground(new java.awt.Color(120, 120, 120));
        pnlResults.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Results:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        javax.swing.GroupLayout pnlResultsLayout = new javax.swing.GroupLayout(pnlResults);
        pnlResults.setLayout(pnlResultsLayout);
        pnlResultsLayout.setHorizontalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 952, Short.MAX_VALUE)
        );
        pnlResultsLayout.setVerticalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 147, Short.MAX_VALUE)
        );

        pnlInput.setBackground(new java.awt.Color(120, 120, 120));

        javax.swing.GroupLayout pnlInputLayout = new javax.swing.GroupLayout(pnlInput);
        pnlInput.setLayout(pnlInputLayout);
        pnlInputLayout.setHorizontalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlInputLayout.setVerticalGroup(
            pnlInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 667, Short.MAX_VALUE)
        );

        cmdStart.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdStart.setText("Start");
        cmdStart.setToolTipText("<html> Start processing. </html>");
        cmdStart.setEnabled(false);
        cmdStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdStartActionPerformed(evt);
            }
        });

        cmdCancel.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        cmdCancel.setText("Cancel");
        cmdCancel.setToolTipText("<html> Cancel process. </html>");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmdCancelActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("Status:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cmdStart, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                    .addComponent(progBar, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                    .addComponent(pnlInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCancel)
                    .addComponent(cmdStart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        mnuMain.setBackground(new java.awt.Color(213, 219, 245));

        mnuFile.setText("File");

        mnuFileExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/close-tool.png"))); // NOI18N
        mnuFileExit.setText("Close");
        mnuFileExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuFileExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuFileExit);

        mnuMain.add(mnuFile);

        mnuRun.setText("Run");

        mnuRunStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/light.png"))); // NOI18N
        mnuRunStart.setText("Start");
        mnuRunStart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunStartActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunStart);

        mnuRunCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lightCancel.png"))); // NOI18N
        mnuRunCancel.setText("Cancel");
        mnuRunCancel.setEnabled(false);
        mnuRunCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunCancelActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunCancel);
        mnuRun.add(mnuRunSep1);

        mnuRunReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/reload.png"))); // NOI18N
        mnuRunReset.setText("Reset");
        mnuRunReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuRunResetActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunReset);

        mnuMain.add(mnuRun);

        mnuHelp.setText("Help");

        mnuHelpContents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/lookup.png"))); // NOI18N
        mnuHelpContents.setText("Contents");
        mnuHelp.add(mnuHelpContents);

        mnuMain.add(mnuHelp);

        setJMenuBar(mnuMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdStartActionPerformed
    {//GEN-HEADEREND:event_cmdStartActionPerformed
      runProcedure();
    }//GEN-LAST:event_cmdStartActionPerformed

    private void closingFrame(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_closingFrame
    {//GEN-HEADEREND:event_closingFrame
      // TODO add your handling code here:
    }//GEN-LAST:event_closingFrame

    private void mnuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileExitActionPerformed
      cancel();
      dispose();
}//GEN-LAST:event_mnuFileExitActionPerformed

private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
  cancel();
}//GEN-LAST:event_cmdCancelActionPerformed

private void mnuRunStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRunStartActionPerformed
  runProcedure();
}//GEN-LAST:event_mnuRunStartActionPerformed

private void mnuRunCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRunCancelActionPerformed
  cancel();
}//GEN-LAST:event_mnuRunCancelActionPerformed

  private void mnuRunResetActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_mnuRunResetActionPerformed
  {//GEN-HEADEREND:event_mnuRunResetActionPerformed
    reset();
  }//GEN-LAST:event_mnuRunResetActionPerformed

  @Override
  public void shutdown()
  {
   this.setVisible( false );
   cancel();
  this.dispose();
  }
  private void cancel()
  {
    for(Entry<String, FilterRunner> filter : f_runners.entrySet())
        filter.getValue().cancel();
  }
  
  private void reset()
  {
    f_runners.clear();
 
    this.f_input.reset();
    this.f_output.resetTable();
  }


//  public void showAbundancePlot()
//  {
//    if ( showingAbundancePlots == JOptionPane.YES_OPTION)
//    {
//      for ( final File theInput : in_files )
//      {
//        final FilterRunner getTrigger = f_runners.get( theInput.getName() );
//        if ( getTrigger.isComplete() )
//        {
//          AbundanceDistributionViewer myAbundDist = AbundanceDistributionViewer.generateAbundanceDistribution();
//          myAbundDist.inputData( getTrigger.getData() );
//          myAbundDist.initiliseSizeClassDistribution();
//          myAbundDist.revalidate();
//        }
//      }
//    }
//    
//    
//    
//  }
  // ***** Start GUIInterface methods *****
  
  @Override
  public void runProcedure()
  {
    showingAbundancePlots = JOptionPane.showConfirmDialog(
      this,
      "Would you like to view the abundance plots for your data?",
      "Filter",
      JOptionPane.YES_NO_OPTION );
    
    
    
    filesIgnored = false;
    in_files = f_input.getInputFiles();
    File out_dir = f_input.getOutputFile();

    FilterParams ar_params = f_input.getParams();
    Iterator<File> iterator = in_files.iterator();
    this.progBar.setMaximum( in_files.size());
    while(iterator.hasNext())
    {
      File theInput = iterator.next();
      //filename we will be creating in the filter tool:
      String singleOutPath  = out_dir.getAbsolutePath() + DIR_SEPARATOR + FilenameUtils.removeExtension( theInput.getName() ) + "_filter.fa";
      File outputFile = new File(singleOutPath);
      //check for exist and do not overwrite unless told to:
      if ( outputFile.exists() )
      {
        if ( !this.f_input.getOverwriteConfirm() )
        {
          
          filesIgnored = true;
          iterator.remove();
          LOGGER.log( Level.WARNING, "{0} not processed due to overwrite warning", outputFile.getName() );
          this.progBar.setMaximum( in_files.size());
        }
      }
      
    }
    for ( final File theInput : in_files )
    {
      FilterRunner f_runner = new FilterRunner( this );
      f_runner.runFilterTool( theInput, out_dir, ar_params, showingAbundancePlots, null );
      SwingUtilities.invokeLater( new Runnable()
      {
        @Override
        public void run()
        {
          f_output.addOutputTab( theInput.getName() );
          f_output.setResultsWaiting( theInput.getName(), true );
        }
      } );
      this.f_runners.put( theInput.getName(), f_runner );
    }
    f_output.revalidate();
    if ( this.filesIgnored )
    {
      JOptionPane.showMessageDialog( null,
         "Some files were ignored due to overwrite warnings" + LINE_SEPARATOR
        + "Re-run with force overwrite selected or choose an empty directory"+ LINE_SEPARATOR+
        "Visit the log file for a list of all files that were not processed",
         
        "Output Warning",
       
        JOptionPane.ERROR_MESSAGE );
    }
  }

  @Override public JPanel getParamsPanel()                        {return null;}
  @Override public void setShowingParams( boolean newState ) {}  
  @Override public boolean getShowingParams()                {return false;}
  
  // ***** End GUIInterface methods *****
  
  
  // ***** Start ToolHost methods *****

  @Override
  public void update()
  {
    try
    {
      
      
      File out_dir = f_input.getOutputFile();
      final ArrayList<String> historyWrite = new ArrayList<String>();
      boolean allComplete = true;
      for(final File theInput : in_files)
      {
        final FilterRunner getTrigger = f_runners.get( theInput.getName() );
        if ( getTrigger.isComplete() )
        {
          lblStatus.setText( "Status: Completed: " + theInput.getName() );
          progBar.setValue( this.progBar.getValue()+1 );
          historyWrite.add(out_dir.getAbsolutePath() + DIR_SEPARATOR + FilenameUtils.removeExtension( theInput.getName() ) + "_filter.fa");
          //f_output.fillLengthDistTable( theInput.getName(), ar_runners.get( theInput.getName() ).getLengths() );
          SwingUtilities.invokeLater( new Runnable()
          {
            @Override
            public void run()
            {
              f_output.fillResultsTable( theInput.getName(), getTrigger.getResults() );
              f_output.setResultsWaiting( theInput.getName(), false );
            }
          } );
        }
      }
      for(final File theInput : in_files)
      {
        FilterRunner getTrigger = f_runners.get( theInput.getName() );
        if ( !getTrigger.isComplete() )
        {
          allComplete = false;
        }
      }
      //just give java a minute to think about swinging...
      Thread.sleep( 500 );
      if ( allComplete )
      {
        SwingUtilities.invokeLater( new Runnable()
        {
          @Override
          public void run()
          {
            lblStatus.setText( "Status: All Files Completed Successfully" );
            progBar.setValue( 0 );
            f_input.addToHistory(historyWrite);
          }
        } );
        
      }
    }
    catch (Exception e)
    {
      showErrorDialog( e.getMessage() );
    }
  }

  @Override
  public final void setRunningStatus( boolean running )
  {
    if ( this.go_control != null )
    {
      this.go_control.setRunning( running );
      this.f_input.setEnabled( !running );
      this.mnuRunReset.setEnabled( !running );
    }
  }

  @Override
  public void showErrorDialog( String message )
  {
    JOptionPane.showMessageDialog( this,
      message,
      "Filter Tool Error",
      JOptionPane.ERROR_MESSAGE );
//    cancel();
//    reset();
  }
  
  // ***** End HostTool methods *****
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdStart;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuFileExit;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenuItem mnuHelpContents;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenu mnuRun;
    private javax.swing.JMenuItem mnuRunCancel;
    private javax.swing.JMenuItem mnuRunReset;
    private javax.swing.JPopupMenu.Separator mnuRunSep1;
    private javax.swing.JMenuItem mnuRunStart;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlResults;
    private javax.swing.JProgressBar progBar;
    // End of variables declaration//GEN-END:variables
}
