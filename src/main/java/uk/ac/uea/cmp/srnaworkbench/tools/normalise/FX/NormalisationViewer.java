/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.ac.uea.cmp.srnaworkbench.tools.normalise.FX;

import java.io.IOException;
import java.util.logging.Level;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javax.swing.JPanel;
import uk.ac.uea.cmp.srnaworkbench.GUIInterface;
import uk.ac.uea.cmp.srnaworkbench.tools.normalise.NormaliseParamsGUI;
import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;

/**
 *
 * @author w0445959
 */
public class NormalisationViewer extends javax.swing.JInternalFrame implements GUIInterface
{

    
    private Scene scene;
    private Parent root;
    private NormalisationController controller;
    
    //using swing params for now but will replace with FX when time permits
    private NormaliseParamsGUI paramsPanel = new NormaliseParamsGUI();
    private boolean showingParams = false;
    /**
     * Creates new form NormalisationViewer
     */
    public NormalisationViewer()
    {
        initComponents();
        
        JFXPanel fxPanel = new JFXPanel();
        this.mainScrollPane.setViewportView(fxPanel);
    
        Platform.runLater(() ->
        {
            initFX(fxPanel);
        });
    }

    private void initFX(JFXPanel fxPanel)
    {
        // This method is invoked on the JavaFX thread
        createScene();
        fxPanel.setScene(scene);
    }

    private void createScene() 
    {
        try
        {
            //Parent root = FXMLLoader.load(FileHierarchyViewer.class.getResource("/fxml/FileHierarchyView.fxml"));
            FXMLLoader loader = new FXMLLoader(NormalisationController.class.getResource("/fxml/NormalisationScene.fxml"));
            root = loader.load();
            scene = new Scene(root);
            scene.getStylesheets().add("/styles/Styles.css");

            controller = (NormalisationController)loader.getController();
            controller.setStageAndSetupListeners(scene);
            //controller.addParentFrame(this);
        }
        catch (IOException ex)
        {
            LOGGER.log(Level.SEVERE, null, ex);
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mainScrollPane = new javax.swing.JScrollPane();

        setClosable(true);
        setIconifiable(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void runProcedure()
    {
     

        if(paramsPanel.createParams())
        {
         ///   controller.normaliseData(paramsPanel.getParams());
        }
      
       
    }

    @Override
    public JPanel getParamsPanel()
    {
        return paramsPanel;
    }

    @Override
    public void setShowingParams(boolean newState)
    {
       showingParams = newState;
    }

    @Override
    public boolean getShowingParams()
    {
       return showingParams;
    }

    @Override
    public void shutdown()
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
