
package uk.ac.uea.cmp.srnaworkbench.tools.tasi;

import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import uk.ac.uea.cmp.srnaworkbench.history.HistoryFileType;

import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils.FileExtFilter;
import uk.ac.uea.cmp.srnaworkbench.utils.FormattingUtils;
import uk.ac.uea.cmp.srnaworkbench.utils.RegexPatternFormatter;

import static uk.ac.uea.cmp.srnaworkbench.tools.tasi.TasiParams.Definition.*;
import uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger;
import uk.ac.uea.cmp.srnaworkbench.utils.StringUtils;

/**
 *
 * @author Dan Mapleson
 */
final class TasiInputPanel extends javax.swing.JPanel
{
    private TasiParams params;
    
    public TasiInputPanel()
    {
        // Init GUI components
        initComponents();
        
        // Formatter for number params text boxes
        java.util.regex.Pattern numberFilter = java.util.regex.Pattern.compile("[0-9]*");
        RegexPatternFormatter numberRegexFormatter = new RegexPatternFormatter(numberFilter);
        numberRegexFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory numberFactory = new DefaultFormatterFactory(numberRegexFormatter);
        this.txtMinAbundance.setFormatterFactory(numberFactory);
        this.txtPhaseReg.setFormatterFactory( numberFactory );
        this.txtPhaseReg.setText( PHASING_REGISTER.getDefault( Integer.class).toString() );
        
        java.util.regex.Pattern negNumberFilter = java.util.regex.Pattern.compile("(-)*[0-9]+(\\.)*([0-9])*");
        RegexPatternFormatter negNumberRegexFormatter = new RegexPatternFormatter(negNumberFilter);
        negNumberRegexFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory negNumberFactory = new DefaultFormatterFactory(negNumberRegexFormatter);
        
        this.txtPVal.setFormatterFactory(negNumberFactory);
        
        this.txtMinAbundance.setText(MINIMUM_ABUNDANCE.getDefault(Integer.class).toString());
        
        setPVal( P_VALUE_THRESHOLD.getDefault(Double.class) );     
        fspInput.setHistoryType( HistoryFileType.SRNA );
        fspGenome.setHistoryType( HistoryFileType.GENOME);
        
        fspInput.setToolName( "TASI" );
        fspGenome.setToolName( "TASI" );
        fspInput.setHistorySingleMode(true);
    }
    
    private void setPVal( Double p_val )
    {
      String p_val_str = FormattingUtils.format("#.##########", p_val);
        
      this.txtPVal.setText(p_val_str);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fspInput = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();
        fspGenome = new uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel();
        pnlParams = new javax.swing.JPanel();
        lblMinAbundance = new javax.swing.JLabel();
        txtMinAbundance = new javax.swing.JFormattedTextField();
        txtPVal = new javax.swing.JFormattedTextField();
        lblPVal = new javax.swing.JLabel();
        txtPhaseReg = new javax.swing.JFormattedTextField();
        lblPhaseReg = new javax.swing.JLabel();

        setBackground(new java.awt.Color(120, 120, 120));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ta-si Predictor Input Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        setForeground(new java.awt.Color(255, 255, 255));

        fspInput.setFilters(FileExtFilter.toFilterArray(FileExtFilter.FASTA));
        fspInput.setFocusCycleRoot(true);
        fspInput.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        fspInput.setLabel("Input File Path (mandatory):      ");
        fspInput.setLabelWidth(170);
        fspInput.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.LOAD);

        fspGenome.setFilters(FileExtFilter.toFilterArray(FileExtFilter.FASTA));
        fspGenome.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        fspGenome.setLabel("Genome File Path (mandatory):");
        fspGenome.setLabelWidth(170);
        fspGenome.setSelector(uk.ac.uea.cmp.srnaworkbench.swing.FileSelector.LOAD);

        pnlParams.setBackground(new java.awt.Color(120, 120, 120));
        pnlParams.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Parameters:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans Unicode", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        lblMinAbundance.setBackground(new java.awt.Color(120, 120, 120));
        lblMinAbundance.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblMinAbundance.setForeground(new java.awt.Color(255, 255, 255));
        lblMinAbundance.setText("Min. abundance:");

        txtMinAbundance.setText("1");
        txtMinAbundance.setToolTipText("Threshold for the minimum allowed abundance for sRNAs contained in the input samples.");
        txtMinAbundance.setEnabled(false);
        txtMinAbundance.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        txtPVal.setText("1");
        txtPVal.setToolTipText("<html>\nThreshold for the p-value for each TAS locus.<br/>\nIf the p-value for a locus is over this threshold then the TAS locus is not considered valid.  If the p-value is equal to or under the threshold then it is output.\n</html>");
        txtPVal.setEnabled(false);
        txtPVal.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        lblPVal.setBackground(new java.awt.Color(120, 120, 120));
        lblPVal.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblPVal.setForeground(new java.awt.Color(255, 255, 255));
        lblPVal.setText("P-Value Threshold:");

        txtPhaseReg.setText("21");
        txtPhaseReg.setToolTipText("The phase register used during prediction");
        txtPhaseReg.setEnabled(false);
        txtPhaseReg.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N

        lblPhaseReg.setBackground(new java.awt.Color(120, 120, 120));
        lblPhaseReg.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 11)); // NOI18N
        lblPhaseReg.setForeground(new java.awt.Color(255, 255, 255));
        lblPhaseReg.setText("Phasing Register:");
        lblPhaseReg.setToolTipText("The phase register used during prediction");

        javax.swing.GroupLayout pnlParamsLayout = new javax.swing.GroupLayout(pnlParams);
        pnlParams.setLayout(pnlParamsLayout);
        pnlParamsLayout.setHorizontalGroup(
            pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMinAbundance, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtMinAbundance, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPVal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPhaseReg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPhaseReg, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlParamsLayout.setVerticalGroup(
            pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParamsLayout.createSequentialGroup()
                .addGroup(pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPhaseReg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPhaseReg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMinAbundance, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMinAbundance, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPVal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPVal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fspInput, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                    .addComponent(fspGenome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlParams, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fspInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fspGenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Tasi Options");
        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setEnabled(boolean enabled)
    {
        super.setEnabled(enabled);

        fspInput.setEnabled( enabled );
        fspGenome.setEnabled( enabled );
        lblMinAbundance.setEnabled(enabled);
        txtMinAbundance.setEnabled(enabled);
        lblPVal.setEnabled(enabled);
        txtPVal.setEnabled(enabled);
        this.txtPhaseReg.setEnabled( enabled );
    }

    public File getInputFile()
    {
        return fspInput.getFile();
    }

    
    public TasiParams getParams()
    {
        if (!createParams())
            return null;
        
        return this.params;
    }

    private boolean createParams()
    {
        try
        {
            String min_abd_str = this.txtMinAbundance.getText().trim();
            String pval_str = this.txtPVal.getText().trim();
            String phase_reg_str = this.txtPhaseReg.getText().trim();
            
            int min_abd = StringUtils.safeIntegerParse(min_abd_str , MINIMUM_ABUNDANCE.getDefault(Integer.class));
            double pval = StringUtils.safeDoubleParse( pval_str, P_VALUE_THRESHOLD.getDefault(Double.class) );
            
            int phase_reg = StringUtils.safeIntegerParse( phase_reg_str, PHASING_REGISTER.getDefault(Integer.class));
            File genome = this.fspGenome.getFile();

            params = new TasiParams.Builder()
              .setPValThreshold( pval )
              .setMinAbundance( min_abd )
              .setGenome( genome )
              .setPhasingRegister( phase_reg )
              .build();
        }
        catch (Exception ex)
        {
            WorkbenchLogger.LOGGER.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "ta-si Predictor Error",
                    JOptionPane.ERROR_MESSAGE);

            return false;
        }
        return true;
    }
    
    public void reset()
    {
      fspInput.clear();
      fspGenome.clear();
      txtMinAbundance.setText( MINIMUM_ABUNDANCE.getDefault(Integer.class).toString() );
      setPVal( P_VALUE_THRESHOLD.getDefault(Double.class) );
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel fspGenome;
    private uk.ac.uea.cmp.srnaworkbench.swing.FileSelectorPanel fspInput;
    private javax.swing.JLabel lblMinAbundance;
    private javax.swing.JLabel lblPVal;
    private javax.swing.JLabel lblPhaseReg;
    private javax.swing.JPanel pnlParams;
    private javax.swing.JFormattedTextField txtMinAbundance;
    private javax.swing.JFormattedTextField txtPVal;
    private javax.swing.JFormattedTextField txtPhaseReg;
    // End of variables declaration//GEN-END:variables
}
