/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TPlotFrame.java
 *
 * Created on 27-Sep-2011, 16:48:49
 */
package uk.ac.uea.cmp.srnaworkbench.tools.vissr.tplots;

import uk.ac.uea.cmp.srnaworkbench.*;
import uk.ac.uea.cmp.srnaworkbench.io.ParesnipIO;
import uk.ac.uea.cmp.srnaworkbench.tools.paresnip.*;
import uk.ac.uea.cmp.srnaworkbench.utils.*;
import uk.ac.uea.cmp.srnaworkbench.utils.FileDialogUtils.FileExtFilter;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.List;
import java.util.logging.Level;

import javax.swing.*;
import uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger;
import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;

/**
 *
 * @author prb07qmu
 */
public class TPlotFrame extends javax.swing.JInternalFrame implements GUIInterface
{
  private final TPlotCanvas _canvas = new TPlotCanvas();

  private final List< PlotRecord > _records;

  private int _currentPlotRecordIndex = -1;

  /** Creates new form TPlotFrame */
  public TPlotFrame( List< PlotRecord > list, final int selectedPlotRecordIndex )
  {
    super( "T-Plots", false, true );

    if ( list == null )
    {
      _records = Collections.emptyList();
    }
    else
    {
      _records = list;
    }

    if ( ! _records.isEmpty() )
    {
      Set< Category > categories = CollectionUtils.newTreeSet();

      for ( PlotRecord pr : _records )
      {
        categories.add( pr.getMaxCategory() );
      }

      super.setTitle( "T-Plots for category " + Category.concatenateValues( categories ) + " hits" );
    }

    initComponents();
    initOtherComponents();

    pack();

    if ( selectedPlotRecordIndex >= 0 )
    {
      // Have to do this later to ensure component has a graphics object for drawing
      //
      SwingUtilities.invokeLater( new Runnable()
      {
        @Override
        public void run()
        {
          displayPlotRecord( selectedPlotRecordIndex );
        }
      } );
    }
  }

  final void displayPlotRecord( int index )
  {
    if ( index < 0 || index >= _records.size() )
      return;

    if ( _currentPlotRecordIndex == index )
      return;

    _currentPlotRecordIndex = index;

    textPage.setText( Integer.toString( index + 1 ) );

    PlotRecord pr = _records.get( _currentPlotRecordIndex );

    _canvas.displayPlotRecord( pr );
  }
@Override
  public void shutdown()
  {
    
   this.dispose();
  }
  @Override
  public void dispose()
  {
    super.dispose();
    _canvas.dispose();

    System.gc();
  }

  // dummy implementation of GUIInterface
  @Override public void runProcedure() {}
  @Override public JPanel getParamsPanel() { return null; }
  @Override public void setShowingParams( boolean newState ) {}
  @Override public boolean getShowingParams() { return false; }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlTop = new javax.swing.JPanel();
        btnPageUp = new javax.swing.JButton();
        btnPageDown = new javax.swing.JButton();
        textPage = new javax.swing.JFormattedTextField();
        lblPageCount = new javax.swing.JLabel();
        btnPDFSaveSingle = new javax.swing.JButton();
        btnPDFSaveAll = new javax.swing.JButton();
        progPDFSaveAll = new javax.swing.JProgressBar();
        btnTakePicture = new javax.swing.JButton();
        pnlCentre = new javax.swing.JPanel();
        pnlBottom = new javax.swing.JPanel();
        lblShow = new javax.swing.JLabel();
        chkShowLabels = new javax.swing.JCheckBox();
        chkShowDegHits = new javax.swing.JCheckBox();
        chkShowCat0 = new javax.swing.JCheckBox();
        chkShowCat1 = new javax.swing.JCheckBox();
        chkShowCat2 = new javax.swing.JCheckBox();
        chkShowCat3 = new javax.swing.JCheckBox();
        chkShowCat4 = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(120, 120, 120));
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GUI_Icons/magnifyingglass.png"))); // NOI18N
        setMinimumSize(null);

        pnlTop.setBackground(new java.awt.Color(120, 120, 120));
        pnlTop.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlTop.setMaximumSize(new java.awt.Dimension(2147483647, 60));
        pnlTop.setMinimumSize(new java.awt.Dimension(842, 60));
        pnlTop.setPreferredSize(new java.awt.Dimension(842, 60));

        btnPageUp.setBackground(new java.awt.Color(120, 120, 120));
        btnPageUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/arrow-round_left.png"))); // NOI18N
        btnPageUp.setToolTipText("Go to previous T-plot");
        btnPageUp.setIconTextGap(0);
        btnPageUp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnPageUp.setMaximumSize(new java.awt.Dimension(20, 25));
        btnPageUp.setMinimumSize(new java.awt.Dimension(20, 25));
        btnPageUp.setPreferredSize(new java.awt.Dimension(20, 25));

        btnPageDown.setBackground(new java.awt.Color(120, 120, 120));
        btnPageDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/arrow-round_right.png"))); // NOI18N
        btnPageDown.setToolTipText("Go to next T-plot");
        btnPageDown.setIconTextGap(0);
        btnPageDown.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnPageDown.setMaximumSize(new java.awt.Dimension(20, 25));
        btnPageDown.setMinimumSize(new java.awt.Dimension(20, 25));
        btnPageDown.setPreferredSize(new java.awt.Dimension(20, 25));

        textPage.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        textPage.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        textPage.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textPage.setFocusLostBehavior(javax.swing.JFormattedTextField.REVERT);
        textPage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblPageCount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPageCount.setForeground(java.awt.Color.white);
        lblPageCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPageCount.setText("of XXX");
        lblPageCount.setIconTextGap(0);

        btnPDFSaveSingle.setBackground(new java.awt.Color(120, 120, 120));
        btnPDFSaveSingle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/save.png"))); // NOI18N
        btnPDFSaveSingle.setToolTipText("Save the current T-plot to a PDF file");
        btnPDFSaveSingle.setIconTextGap(0);
        btnPDFSaveSingle.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnPDFSaveSingle.setMaximumSize(new java.awt.Dimension(20, 25));
        btnPDFSaveSingle.setMinimumSize(new java.awt.Dimension(20, 25));
        btnPDFSaveSingle.setPreferredSize(new java.awt.Dimension(20, 25));

        btnPDFSaveAll.setBackground(new java.awt.Color(120, 120, 120));
        btnPDFSaveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/saveAll.png"))); // NOI18N
        btnPDFSaveAll.setToolTipText("Save all T-plots to a PDF file");
        btnPDFSaveAll.setIconTextGap(0);
        btnPDFSaveAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnPDFSaveAll.setMaximumSize(new java.awt.Dimension(40, 40));
        btnPDFSaveAll.setMinimumSize(new java.awt.Dimension(40, 40));
        btnPDFSaveAll.setPreferredSize(new java.awt.Dimension(40, 40));

        progPDFSaveAll.setBackground(new java.awt.Color(120, 120, 120));
        progPDFSaveAll.setMaximumSize(new java.awt.Dimension(40, 40));
        progPDFSaveAll.setMinimumSize(new java.awt.Dimension(40, 40));
        progPDFSaveAll.setPreferredSize(new java.awt.Dimension(40, 40));
        progPDFSaveAll.setStringPainted(true);

        btnTakePicture.setBackground(new java.awt.Color(120, 120, 120));
        btnTakePicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SharedImages/screen.png"))); // NOI18N
        btnTakePicture.setToolTipText("Save a picture of the current T-plot");
        btnTakePicture.setIconTextGap(0);
        btnTakePicture.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnTakePicture.setMaximumSize(new java.awt.Dimension(20, 25));
        btnTakePicture.setMinimumSize(new java.awt.Dimension(20, 25));
        btnTakePicture.setPreferredSize(new java.awt.Dimension(20, 25));

        javax.swing.GroupLayout pnlTopLayout = new javax.swing.GroupLayout(pnlTop);
        pnlTop.setLayout(pnlTopLayout);
        pnlTopLayout.setHorizontalGroup(
            pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(btnPageUp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnPageDown, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(textPage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(lblPageCount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnPDFSaveSingle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTopLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(progPDFSaveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnPDFSaveAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(btnTakePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlTopLayout.setVerticalGroup(
            pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(btnPageUp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(btnPageDown, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(textPage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblPageCount, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(btnPDFSaveSingle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTopLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(progPDFSaveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnPDFSaveAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(btnTakePicture, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(pnlTop, java.awt.BorderLayout.PAGE_START);

        pnlCentre.setBackground(java.awt.Color.white);
        pnlCentre.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlCentre.addMouseWheelListener(new java.awt.event.MouseWheelListener()
        {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
            {
                pnlCentreMouseWheelMoved(evt);
            }
        });
        pnlCentre.setLayout(new java.awt.BorderLayout());
        getContentPane().add(pnlCentre, java.awt.BorderLayout.CENTER);

        pnlBottom.setBackground(new java.awt.Color(120, 120, 120));
        pnlBottom.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlBottom.setMaximumSize(new java.awt.Dimension(2147483647, 26));
        pnlBottom.setMinimumSize(new java.awt.Dimension(842, 26));
        pnlBottom.setPreferredSize(new java.awt.Dimension(842, 26));

        lblShow.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblShow.setForeground(java.awt.Color.white);
        lblShow.setText("Show:");

        chkShowLabels.setBackground(new java.awt.Color(120, 120, 120));
        chkShowLabels.setForeground(java.awt.Color.white);
        chkShowLabels.setSelected(true);
        chkShowLabels.setText("Labels");

        chkShowDegHits.setBackground(new java.awt.Color(120, 120, 120));
        chkShowDegHits.setSelected(true);
        chkShowDegHits.setText("Degradome hits");

        chkShowCat0.setBackground(new java.awt.Color(120, 120, 120));
        chkShowCat0.setSelected(true);
        chkShowCat0.setText("Cat. 0");

        chkShowCat1.setBackground(new java.awt.Color(120, 120, 120));
        chkShowCat1.setSelected(true);
        chkShowCat1.setText("Cat. 1");

        chkShowCat2.setBackground(new java.awt.Color(120, 120, 120));
        chkShowCat2.setSelected(true);
        chkShowCat2.setText("Cat. 2");

        chkShowCat3.setBackground(new java.awt.Color(120, 120, 120));
        chkShowCat3.setSelected(true);
        chkShowCat3.setText("Cat. 3");

        chkShowCat4.setBackground(new java.awt.Color(120, 120, 120));
        chkShowCat4.setSelected(true);
        chkShowCat4.setText("Cat. 4");

        javax.swing.GroupLayout pnlBottomLayout = new javax.swing.GroupLayout(pnlBottom);
        pnlBottom.setLayout(pnlBottomLayout);
        pnlBottomLayout.setHorizontalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBottomLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(lblShow)
                .addGap(12, 12, 12)
                .addComponent(chkShowLabels)
                .addGap(17, 17, 17)
                .addComponent(chkShowDegHits)
                .addGap(31, 31, 31)
                .addComponent(chkShowCat0)
                .addGap(14, 14, 14)
                .addComponent(chkShowCat1)
                .addGap(14, 14, 14)
                .addComponent(chkShowCat2)
                .addGap(14, 14, 14)
                .addComponent(chkShowCat3)
                .addGap(14, 14, 14)
                .addComponent(chkShowCat4))
        );
        pnlBottomLayout.setVerticalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBottomLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblShow, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShowLabels, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShowDegHits, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShowCat0, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShowCat1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShowCat2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShowCat3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkShowCat4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(pnlBottom, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void pnlCentreMouseWheelMoved( java.awt.event.MouseWheelEvent evt )//GEN-FIRST:event_pnlCentreMouseWheelMoved
  {//GEN-HEADEREND:event_pnlCentreMouseWheelMoved
    int newIndex = _currentPlotRecordIndex + evt.getWheelRotation();

    newIndex = Math.max( Math.min( newIndex, _records.size() - 1), 0 );

    displayPlotRecord( newIndex );
  }//GEN-LAST:event_pnlCentreMouseWheelMoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPDFSaveAll;
    private javax.swing.JButton btnPDFSaveSingle;
    private javax.swing.JButton btnPageDown;
    private javax.swing.JButton btnPageUp;
    private javax.swing.JButton btnTakePicture;
    private javax.swing.JCheckBox chkShowCat0;
    private javax.swing.JCheckBox chkShowCat1;
    private javax.swing.JCheckBox chkShowCat2;
    private javax.swing.JCheckBox chkShowCat3;
    private javax.swing.JCheckBox chkShowCat4;
    private javax.swing.JCheckBox chkShowDegHits;
    private javax.swing.JCheckBox chkShowLabels;
    private javax.swing.JLabel lblPageCount;
    private javax.swing.JLabel lblShow;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlCentre;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JProgressBar progPDFSaveAll;
    private javax.swing.JFormattedTextField textPage;
    // End of variables declaration//GEN-END:variables

  private void initOtherComponents()
  {
    pnlCentre.add( _canvas, BorderLayout.CENTER );

    btnPageUp.setAction( new ChangePageRequestAction( btnPageUp, true ) );
    btnPageDown.setAction( new ChangePageRequestAction( btnPageDown, false ) );

    btnPDFSaveSingle.setAction( new PdfRequestAction( btnPDFSaveSingle, true ) );
    btnPDFSaveAll.setAction( new PdfRequestAction( btnPDFSaveAll, false ) );
    progPDFSaveAll.setVisible( false );

    btnTakePicture.setAction( new ImageUtils.TakePictureAction( btnTakePicture, _canvas, null ) );

    textPage.addKeyListener( new KeyAdapter()
    {
      @Override
      public void keyTyped( KeyEvent e )
      {
        if ( e.getKeyChar() == KeyEvent.VK_ENTER )
        {
          int page = StringUtils.safeIntegerParse( textPage.getText(), -1 );

          if ( page != -1 )
          {
            displayPlotRecord( page - 1 );
          }
        }
      }
    } );

    textPage.addFocusListener( new FocusAdapter()
    {
      @Override
      public void focusGained( FocusEvent e )
      {
        textPage.select( 0, Integer.MAX_VALUE );
      }
    } );

    lblPageCount.setText( "of " + _records.size() );

    // Wire up the checkboxes

    Map< TPlotCanvas.DisplayableItem, JCheckBox > chkHelper = CollectionUtils.newHashMap();

    chkHelper.put( TPlotCanvas.DisplayableItem.CAT_0, chkShowCat0 );
    chkHelper.put( TPlotCanvas.DisplayableItem.CAT_1, chkShowCat1 );
    chkHelper.put( TPlotCanvas.DisplayableItem.CAT_2, chkShowCat2 );
    chkHelper.put( TPlotCanvas.DisplayableItem.CAT_3, chkShowCat3 );
    chkHelper.put( TPlotCanvas.DisplayableItem.CAT_4, chkShowCat4 );
    chkHelper.put( TPlotCanvas.DisplayableItem.DEGRADOME_HIT, chkShowDegHits );
    chkHelper.put( TPlotCanvas.DisplayableItem.LABEL, chkShowLabels );

    for ( final TPlotCanvas.DisplayableItem di : chkHelper.keySet() )
    {
      final JCheckBox chk = chkHelper.get( di );

      if ( di.getCategory() != Category.UNDEFINED )
      {
        chk.setForeground( di.getCategory().getCategoryColor() );
      }
      else if ( di == TPlotCanvas.DisplayableItem.DEGRADOME_HIT )
      {
        chk.setForeground( Color.blue );
      }

      chk.setAction( new AbstractAction( chk.getText() )
        {
          @Override
          public void actionPerformed( ActionEvent e )
          {
            if ( chk.isSelected() )
            {
              _canvas.addDisplayableItem( di );
            }
            else
            {
              _canvas.removeDisplayableItem( di );
            }
          }
        } );
    }
  }

  //////////////////////////////////////////////////////////////////////////////

  private final class ChangePageRequestAction extends AbstractAction
  {
    private final boolean _isPageUp;

    ChangePageRequestAction( AbstractButton btn, boolean isPageUp )
    {
      super( null, btn.getIcon() );

      super.putValue( Action.SHORT_DESCRIPTION, btn.getToolTipText() );

      _isPageUp = isPageUp;
    }

    @Override
    public void actionPerformed( ActionEvent e )
    {
      displayPlotRecord( _currentPlotRecordIndex + ( _isPageUp ? -1 : 1 ) );
    }
  }

  //////////////////////////////////////////////////////////////////////////////

  public static void main( String[] args )
  {
    File f = new File( "PlotRecords.txt" );

    PlotRecordCollection plotRecords = getPlotRecordCollection( f );

    if ( plotRecords != null )
    {
      saveToPdf( plotRecords );
    }
  }

  private static PlotRecordCollection getPlotRecordCollection( File f )
  {
    if ( f == null )
      return null;

    if ( ! f.exists() )
    {
      WorkbenchLogger.LOGGER.log( Level.WARNING, "The file {0} does not exist", f);
      return null;
    }

    try
    {
      PlotRecordCollection prc = ParesnipIO.readIn( f );
      return prc;
    }
    catch ( IOException ex )
    {
      LOGGER.log( Level.WARNING, null, ex );
    }

    return null;
  }

  /**
   * Saves the given plot records to a PDF file called "all-hits.pdf" in the current directory
   *
   * @param plotRecords List of PlotRecord objects
   */
  public static void saveToPdf( PlotRecordCollection prc )
  {
    saveToPdf( prc, new File( "all-hits.pdf" ) );
  }

  /**
   * Saves the given plot records to a PDF file.
   * The list is sorted in place.
   *
   * @param plotRecords List of PlotRecord objects
   * @param pdfFile The PDF File
   */
  public static void saveToPdf( PlotRecordCollection prc, File pdfFile )
  {
    if ( prc == null || pdfFile == null )
      return;

    List<PlotRecord> plotRecords = CollectionUtils.newArrayList( prc.size() );

    for ( Category cat : Category.definedCategories() )
    {
      plotRecords.addAll( prc.getPlotRecordsForCategory( cat ) );
    }

    PdfHelper ph = new PdfHelper( pdfFile, false );

    if ( ! ph.initialise() )
    {
      LOGGER.log( Level.WARNING, "Failed to initialise the PDF helper" );
      return;
    }

    TPlotCanvas canvas = null;
    try
    {
      canvas = new TPlotCanvas( true );

      for ( PlotRecord pr : plotRecords )
      {
        canvas.displayPlotRecord( pr );

        ph.addComponentImagePage( canvas );
      }
    }
    finally
    {
      if ( canvas != null )
        canvas.dispose();

      ph.dispose();
    }
  }

  //////////////////////////////////////////////////////////////////////////////

  private final class PdfRequestAction extends AbstractAction
  {
    private final boolean _singlePage;

    public PdfRequestAction( AbstractButton btn, boolean singlePage )
    {
      super( null, btn.getIcon() );

      super.putValue( Action.SHORT_DESCRIPTION, btn.getToolTipText() );

      _singlePage = singlePage;
    }

    @Override
    public void actionPerformed( ActionEvent e )
    {
      File f = FileDialogUtils.showFileSaveDialog( TPlotFrame.this, FileExtFilter.PDF.getFilter() );

      if ( f == null )
        return;

      if ( _singlePage )
      {
        doSingle( f );
      }
      else
      {
        doAll( f );
      }

      // Lots of graphics drawing has been performed so request GC
      System.gc();
    }

    private void doSingle( File f )
    {
      PdfHelper ph = new PdfHelper( f, false );

      if ( ph.initialise() )
      {
        ph.addComponentImagePage( _canvas );
        ph.dispose();
      }
    }

    private void doAll( File f )
    {
      final PdfHelper ph = new PdfHelper( f, false );
      final TPlotCanvas canvas = new TPlotCanvas( true );

      if ( ph.initialise() )
      {
        btnPDFSaveAll.setVisible( false );

        progPDFSaveAll.setMaximum( _records.size() );
        progPDFSaveAll.setValue( 0 );
        progPDFSaveAll.setVisible( true );

        // SwingWorker writes T-plots to PDF in the background
        SwingWorker<Void,Integer> sw = new SwingWorker<Void,Integer>()
        {
          @Override
          protected Void doInBackground() throws Exception
          {
            int i = 0;

            for ( PlotRecord pr : _records )
            {
              canvas.displayPlotRecord( pr );

              ph.addComponentImagePage( canvas );

              ++i;
              if ( i % 10 == 0 )
              {
                super.publish( i );
              }
            }

            super.publish( _records.size() );

            ph.dispose();

            return null;
          }

          @Override
          protected void process( List<Integer> chunks )
          {
            if ( chunks == null || chunks.isEmpty() )
              return;

            Integer i = chunks.get( chunks.size() - 1 );

            progPDFSaveAll.setValue( i.intValue() );
          }

          @Override
          protected void done()
          {
            // The frame might have been closed.
            if ( TPlotFrame.this.isClosed )
            {
              try
              {
                ph.dispose();
              }
              catch ( Exception e )
              {
                // Probably get an IllegalPdfSyntaxException, but we want to close quietly
              }
            }
            else
            {
              btnPDFSaveAll.setVisible( true );
              progPDFSaveAll.setVisible( false );
            }

            canvas.dispose();
          }
        };

        // Start the SwingWorker
        sw.execute();
      }
      else
      {
        LOGGER.log( Level.SEVERE, "Failed to initialise the PDF helper" );
      }
    }
  }
}
