/*
 * Paramaters.java
 * Created on 07-Dec-2010, 06:57:23
 */
package uk.ac.uea.cmp.srnaworkbench.tools.paresnip;

import uk.ac.uea.cmp.srnaworkbench.tools.*;
import uk.ac.uea.cmp.srnaworkbench.utils.Tools;

import java.awt.event.ItemEvent;

import javax.swing.JOptionPane;

/**
 * @author Leighton Folkes (l.folkes@uea.ac.uk)
 */
public final class Parameters extends javax.swing.JPanel implements ToolParamsHost
{
    private final ParesnipParams params;

    /** Creates new form Parameters */
    public Parameters( ParesnipParams params )
    {
        this.params = params;

        initComponents();
        initOtherComponents();
    }

    private void initOtherComponents()
    {
        this.lblNumProcs.setText( "" + Runtime.getRuntime().availableProcessors() );
        this.threadsToUse.setValue( Tools.getThreadCount() );
        this.params.setThreadCount( Tools.getThreadCount() );

        this.tbParams.setHost( this );
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlLoadSave = new javax.swing.JPanel();
        tbParams = new uk.ac.uea.cmp.srnaworkbench.swing.ParamsToolBar();
        pnlAnalysisType = new javax.swing.JPanel();
        btnLowStringency = new javax.swing.JButton();
        btnHighStringency = new javax.swing.JButton();
        pnlSmallRNAReporting = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        minimumSrnaAbundanceSpinner = new javax.swing.JSpinner();
        subsequencesTickBox = new javax.swing.JCheckBox();
        secondaryOutputCheckBox = new javax.swing.JCheckBox();
        pnlCategory = new javax.swing.JPanel();
        useWeightedFragmentAbundance = new javax.swing.JCheckBox();
        category0 = new javax.swing.JCheckBox();
        category1 = new javax.swing.JCheckBox();
        category2 = new javax.swing.JCheckBox();
        category3 = new javax.swing.JCheckBox();
        category4 = new javax.swing.JCheckBox();
        pnlFilter = new javax.swing.JPanel();
        removeTrna = new javax.swing.JCheckBox();
        removeLowComplexFrags = new javax.swing.JCheckBox();
        lowComplexitySequences = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        minFragSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        maxFragSpinner = new javax.swing.JSpinner();
        jPanel11 = new javax.swing.JPanel();
        minSequenceLength = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        maxSequenceLength = new javax.swing.JSpinner();
        pnlAlignment = new javax.swing.JPanel();
        usingGaps = new javax.swing.JCheckBox();
        allowMismatchesAtPositionEleven = new javax.swing.JCheckBox();
        allowAdjacentMismatches = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        maxAlignmentScoreSpinner = new javax.swing.JSpinner();
        pnlPValue = new javax.swing.JPanel();
        calculatePvalues = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        shuffleSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        pValueCutoffSpinner = new javax.swing.JSpinner();
        notReportingResultsAboveCutoff = new javax.swing.JCheckBox();
        pnlMultithreading = new javax.swing.JPanel();
        lblmulti1 = new javax.swing.JLabel();
        lblNumThreads = new javax.swing.JLabel();
        threadsToUse = new javax.swing.JSpinner();
        lblNumProcs = new javax.swing.JLabel();

        setBackground(new java.awt.Color(120, 120, 120));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PAREsnip parameters", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 12), java.awt.Color.white)); // NOI18N
        setMinimumSize(new java.awt.Dimension(300, 1050));
        setPreferredSize(new java.awt.Dimension(300, 1050));

        pnlLoadSave.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Load / Save Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlLoadSave.setForeground(java.awt.Color.white);
        pnlLoadSave.setOpaque(false);

        javax.swing.GroupLayout pnlLoadSaveLayout = new javax.swing.GroupLayout(pnlLoadSave);
        pnlLoadSave.setLayout(pnlLoadSaveLayout);
        pnlLoadSaveLayout.setHorizontalGroup(
            pnlLoadSaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadSaveLayout.createSequentialGroup()
                .addComponent(tbParams, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
        );
        pnlLoadSaveLayout.setVerticalGroup(
            pnlLoadSaveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pnlAnalysisType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Default Stringency Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlAnalysisType.setForeground(java.awt.Color.white);
        pnlAnalysisType.setOpaque(false);

        btnLowStringency.setBackground(new java.awt.Color(120, 120, 120));
        btnLowStringency.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        btnLowStringency.setText("Low");
        btnLowStringency.setIconTextGap(0);
        btnLowStringency.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnLowStringency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLowStringencyActionPerformed(evt);
            }
        });

        btnHighStringency.setBackground(new java.awt.Color(120, 120, 120));
        btnHighStringency.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        btnHighStringency.setText("High");
        btnHighStringency.setIconTextGap(0);
        btnHighStringency.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnHighStringency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHighStringencyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAnalysisTypeLayout = new javax.swing.GroupLayout(pnlAnalysisType);
        pnlAnalysisType.setLayout(pnlAnalysisTypeLayout);
        pnlAnalysisTypeLayout.setHorizontalGroup(
            pnlAnalysisTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnalysisTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLowStringency, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHighStringency, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );
        pnlAnalysisTypeLayout.setVerticalGroup(
            pnlAnalysisTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnalysisTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnLowStringency, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnHighStringency, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlSmallRNAReporting.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Small RNA Reporting", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlSmallRNAReporting.setForeground(java.awt.Color.white);
        pnlSmallRNAReporting.setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(120, 120, 120));
        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("Minimum Abundance");
        jLabel1.setToolTipText("What is the minimum sRNA abundance cut-off?");

        minimumSrnaAbundanceSpinner.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        minimumSrnaAbundanceSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        minimumSrnaAbundanceSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minimumSrnaAbundanceSpinnerStateChanged(evt);
            }
        });

        subsequencesTickBox.setBackground(new java.awt.Color(120, 120, 120));
        subsequencesTickBox.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        subsequencesTickBox.setForeground(java.awt.Color.white);
        subsequencesTickBox.setText("Subsequences are secondary hits");
        subsequencesTickBox.setToolTipText("Hits which are subsequences of other hits are considered secondary hits.");
        subsequencesTickBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subsequencesTickBoxItemStateChanged(evt);
            }
        });

        secondaryOutputCheckBox.setBackground(new java.awt.Color(120, 120, 120));
        secondaryOutputCheckBox.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        secondaryOutputCheckBox.setForeground(java.awt.Color.white);
        secondaryOutputCheckBox.setText("Output secondary hits to file");
        secondaryOutputCheckBox.setToolTipText("Output hits which have an abundance less than the minimum to file.");
        secondaryOutputCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                secondaryOutputCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlSmallRNAReportingLayout = new javax.swing.GroupLayout(pnlSmallRNAReporting);
        pnlSmallRNAReporting.setLayout(pnlSmallRNAReportingLayout);
        pnlSmallRNAReportingLayout.setHorizontalGroup(
            pnlSmallRNAReportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSmallRNAReportingLayout.createSequentialGroup()
                .addGroup(pnlSmallRNAReportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSmallRNAReportingLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minimumSrnaAbundanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(subsequencesTickBox)
                    .addComponent(secondaryOutputCheckBox))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        pnlSmallRNAReportingLayout.setVerticalGroup(
            pnlSmallRNAReportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSmallRNAReportingLayout.createSequentialGroup()
                .addGroup(pnlSmallRNAReportingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(minimumSrnaAbundanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subsequencesTickBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(secondaryOutputCheckBox)
                .addContainerGap())
        );

        pnlCategory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlCategory.setForeground(java.awt.Color.white);
        pnlCategory.setOpaque(false);

        useWeightedFragmentAbundance.setBackground(new java.awt.Color(120, 120, 120));
        useWeightedFragmentAbundance.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        useWeightedFragmentAbundance.setForeground(java.awt.Color.white);
        useWeightedFragmentAbundance.setSelected(true);
        useWeightedFragmentAbundance.setText("Use Weighted Fragment Abundance");
        useWeightedFragmentAbundance.setToolTipText("Should catagory identification use weighted fragment abundance?");
        useWeightedFragmentAbundance.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                useWeightedFragmentAbundanceItemStateChanged(evt);
            }
        });
        useWeightedFragmentAbundance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useWeightedFragmentAbundanceActionPerformed(evt);
            }
        });

        category0.setBackground(new java.awt.Color(120, 120, 120));
        category0.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        category0.setForeground(java.awt.Color.white);
        category0.setSelected(true);
        category0.setText("Category 0");
        category0.setToolTipText("Show catagory 0 results: > 1 raw read at position, abundance on the trascript is equal to the maximum and there is only one maximum.");
        category0.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                category0ItemStateChanged(evt);
            }
        });

        category1.setBackground(new java.awt.Color(120, 120, 120));
        category1.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        category1.setForeground(java.awt.Color.white);
        category1.setSelected(true);
        category1.setText("Category 1");
        category1.setToolTipText("Show catagory 1 results: > 1 raw read at position, abundance on the transcript is equal to the maximum and there is more than one maximum.");
        category1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                category1ItemStateChanged(evt);
            }
        });

        category2.setBackground(new java.awt.Color(120, 120, 120));
        category2.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        category2.setForeground(java.awt.Color.white);
        category2.setSelected(true);
        category2.setText("Category 2");
        category2.setToolTipText("Show catagory 2 results: > 1 raw read at position, abundance on the transcript is less than the maximum but greather than the median for the transcript.");
        category2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                category2ItemStateChanged(evt);
            }
        });

        category3.setBackground(new java.awt.Color(120, 120, 120));
        category3.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        category3.setForeground(java.awt.Color.white);
        category3.setSelected(true);
        category3.setText("Category 3");
        category3.setToolTipText("Show catagory 3 results: > 1 raw read at position, abundance is equal to or less than the median.");
        category3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                category3ItemStateChanged(evt);
            }
        });

        category4.setBackground(new java.awt.Color(120, 120, 120));
        category4.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        category4.setForeground(java.awt.Color.white);
        category4.setSelected(true);
        category4.setText("Category 4");
        category4.setToolTipText("Show catagory 4 results: Only one raw read at position.");
        category4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                category4ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlCategoryLayout = new javax.swing.GroupLayout(pnlCategory);
        pnlCategory.setLayout(pnlCategoryLayout);
        pnlCategoryLayout.setHorizontalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCategoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useWeightedFragmentAbundance)
                    .addGroup(pnlCategoryLayout.createSequentialGroup()
                        .addComponent(category0)
                        .addGap(18, 18, 18)
                        .addComponent(category1))
                    .addGroup(pnlCategoryLayout.createSequentialGroup()
                        .addComponent(category2)
                        .addGap(18, 18, 18)
                        .addComponent(category3))
                    .addComponent(category4))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        pnlCategoryLayout.setVerticalGroup(
            pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCategoryLayout.createSequentialGroup()
                .addComponent(useWeightedFragmentAbundance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(category0)
                    .addComponent(category1))
                .addGap(5, 5, 5)
                .addGroup(pnlCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category2)
                    .addComponent(category3))
                .addGap(5, 5, 5)
                .addComponent(category4))
        );

        pnlFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlFilter.setForeground(java.awt.Color.white);
        pnlFilter.setMinimumSize(new java.awt.Dimension(0, 229));
        pnlFilter.setOpaque(false);

        removeTrna.setBackground(new java.awt.Color(120, 120, 120));
        removeTrna.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        removeTrna.setForeground(java.awt.Color.white);
        removeTrna.setSelected(true);
        removeTrna.setText("Remove t/rRNA");
        removeTrna.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                removeTrnaItemStateChanged(evt);
            }
        });

        removeLowComplexFrags.setBackground(new java.awt.Color(120, 120, 120));
        removeLowComplexFrags.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        removeLowComplexFrags.setForeground(java.awt.Color.white);
        removeLowComplexFrags.setSelected(true);
        removeLowComplexFrags.setText("Remove low complexity candidates");
        removeLowComplexFrags.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                removeLowComplexFragsItemStateChanged(evt);
            }
        });

        lowComplexitySequences.setBackground(new java.awt.Color(120, 120, 120));
        lowComplexitySequences.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        lowComplexitySequences.setForeground(java.awt.Color.white);
        lowComplexitySequences.setSelected(true);
        lowComplexitySequences.setText("Remove low complexity sequences");
        lowComplexitySequences.setToolTipText("Remove low complexity degradome and srnaome sequences from the search?");
        lowComplexitySequences.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lowComplexitySequencesItemStateChanged(evt);
            }
        });
        lowComplexitySequences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowComplexitySequencesActionPerformed(evt);
            }
        });

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fragment Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 12), java.awt.Color.white)); // NOI18N
        jPanel9.setOpaque(false);

        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("Min.");

        minFragSpinner.setModel(new javax.swing.SpinnerNumberModel(20, 5, 1000, 1));
        minFragSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minFragSpinnerStateChanged(evt);
            }
        });

        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("Max.");

        maxFragSpinner.setModel(new javax.swing.SpinnerNumberModel(21, 4, 1000, 1));
        maxFragSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxFragSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minFragSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxFragSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel3)
                .addComponent(minFragSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel4)
                .addComponent(maxFragSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {maxFragSpinner, minFragSpinner});

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sequence Length", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 12), java.awt.Color.white)); // NOI18N
        jPanel11.setOpaque(false);

        minSequenceLength.setModel(new javax.swing.SpinnerNumberModel(19, 19, 24, 1));
        minSequenceLength.setMinimumSize(new java.awt.Dimension(63, 20));
        minSequenceLength.setPreferredSize(new java.awt.Dimension(63, 20));
        minSequenceLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minSequenceLengthStateChanged(evt);
            }
        });

        jLabel5.setForeground(java.awt.Color.white);
        jLabel5.setText("Min.");

        jLabel6.setForeground(java.awt.Color.white);
        jLabel6.setText("Max.");

        maxSequenceLength.setModel(new javax.swing.SpinnerNumberModel(24, 19, 24, 1));
        maxSequenceLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSequenceLengthStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minSequenceLength, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxSequenceLength, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel6)
                .addComponent(maxSequenceLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5)
                .addComponent(minSequenceLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {maxSequenceLength, minSequenceLength});

        javax.swing.GroupLayout pnlFilterLayout = new javax.swing.GroupLayout(pnlFilter);
        pnlFilter.setLayout(pnlFilterLayout);
        pnlFilterLayout.setHorizontalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFilterLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(removeTrna))
                    .addGroup(pnlFilterLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(removeLowComplexFrags))
                    .addGroup(pnlFilterLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lowComplexitySequences))
                    .addGroup(pnlFilterLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel11, 0, 261, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFilterLayout.setVerticalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addComponent(removeTrna)
                .addGap(4, 4, 4)
                .addComponent(removeLowComplexFrags)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lowComplexitySequences)
                .addGap(9, 9, 9)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlAlignment.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alignment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlAlignment.setForeground(java.awt.Color.white);
        pnlAlignment.setOpaque(false);

        usingGaps.setBackground(new java.awt.Color(120, 120, 120));
        usingGaps.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        usingGaps.setForeground(java.awt.Color.white);
        usingGaps.setSelected(true);
        usingGaps.setText("Allow single nucleotide gap");
        usingGaps.setToolTipText("Use gaps? (please see manual)");
        usingGaps.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                usingGapsItemStateChanged(evt);
            }
        });

        allowMismatchesAtPositionEleven.setBackground(new java.awt.Color(120, 120, 120));
        allowMismatchesAtPositionEleven.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        allowMismatchesAtPositionEleven.setForeground(java.awt.Color.white);
        allowMismatchesAtPositionEleven.setSelected(true);
        allowMismatchesAtPositionEleven.setText("Allow mismatches at position 11");
        allowMismatchesAtPositionEleven.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allowMismatchesAtPositionElevenItemStateChanged(evt);
            }
        });
        allowMismatchesAtPositionEleven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowMismatchesAtPositionElevenActionPerformed(evt);
            }
        });

        allowAdjacentMismatches.setBackground(new java.awt.Color(120, 120, 120));
        allowAdjacentMismatches.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        allowAdjacentMismatches.setForeground(java.awt.Color.white);
        allowAdjacentMismatches.setSelected(true);
        allowAdjacentMismatches.setText("Allow >2 adjacent mismatches (3' sRNA)");
        allowAdjacentMismatches.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allowAdjacentMismatchesItemStateChanged(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(120, 120, 120));
        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        jLabel7.setForeground(java.awt.Color.white);
        jLabel7.setText("Number of mismatches allowed:");

        maxAlignmentScoreSpinner.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        maxAlignmentScoreSpinner.setModel(new javax.swing.SpinnerNumberModel(4.5d, 0.0d, 7.0d, 0.5d));
        maxAlignmentScoreSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxAlignmentScoreSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlAlignmentLayout = new javax.swing.GroupLayout(pnlAlignment);
        pnlAlignment.setLayout(pnlAlignmentLayout);
        pnlAlignmentLayout.setHorizontalGroup(
            pnlAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlignmentLayout.createSequentialGroup()
                .addGroup(pnlAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAlignmentLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxAlignmentScoreSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(usingGaps)
                        .addComponent(allowMismatchesAtPositionEleven)
                        .addComponent(allowAdjacentMismatches, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAlignmentLayout.setVerticalGroup(
            pnlAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAlignmentLayout.createSequentialGroup()
                .addComponent(usingGaps)
                .addGap(5, 5, 5)
                .addComponent(allowMismatchesAtPositionEleven)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allowAdjacentMismatches)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(maxAlignmentScoreSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlPValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "P-Value", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlPValue.setForeground(java.awt.Color.white);
        pnlPValue.setOpaque(false);

        calculatePvalues.setBackground(new java.awt.Color(120, 120, 120));
        calculatePvalues.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        calculatePvalues.setForeground(java.awt.Color.white);
        calculatePvalues.setSelected(true);
        calculatePvalues.setText("Calculate P-Values");
        calculatePvalues.setToolTipText("Should the tool calculate p-values?");
        calculatePvalues.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                calculatePvaluesItemStateChanged(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(120, 120, 120));
        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        jLabel8.setForeground(java.awt.Color.white);
        jLabel8.setText("Number of shuffles:");

        shuffleSpinner.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        shuffleSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 0, 1000, 100));
        shuffleSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                shuffleSpinnerStateChanged(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(120, 120, 120));
        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        jLabel9.setForeground(java.awt.Color.white);
        jLabel9.setText("P-Value Cut Off:");

        pValueCutoffSpinner.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        pValueCutoffSpinner.setModel(new javax.swing.SpinnerNumberModel(0.05d, 0.0d, 1.0d, 0.01d));
        pValueCutoffSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pValueCutoffSpinnerStateChanged(evt);
            }
        });

        notReportingResultsAboveCutoff.setBackground(new java.awt.Color(120, 120, 120));
        notReportingResultsAboveCutoff.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        notReportingResultsAboveCutoff.setForeground(java.awt.Color.white);
        notReportingResultsAboveCutoff.setSelected(true);
        notReportingResultsAboveCutoff.setText("Do not include results > cut off");
        notReportingResultsAboveCutoff.setToolTipText("Alignments with p-value > cut of will not be reported.");
        notReportingResultsAboveCutoff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                notReportingResultsAboveCutoffItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlPValueLayout = new javax.swing.GroupLayout(pnlPValue);
        pnlPValue.setLayout(pnlPValueLayout);
        pnlPValueLayout.setHorizontalGroup(
            pnlPValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPValueLayout.createSequentialGroup()
                .addGroup(pnlPValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPValueLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(pnlPValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnlPValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pValueCutoffSpinner)
                            .addComponent(shuffleSpinner)))
                    .addGroup(pnlPValueLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(notReportingResultsAboveCutoff))
                    .addGroup(pnlPValueLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(calculatePvalues, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pnlPValueLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel8, jLabel9});

        pnlPValueLayout.setVerticalGroup(
            pnlPValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPValueLayout.createSequentialGroup()
                .addComponent(calculatePvalues, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(shuffleSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(pnlPValueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(pValueCutoffSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(notReportingResultsAboveCutoff))
        );

        pnlPValueLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pValueCutoffSpinner, shuffleSpinner});

        pnlPValueLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel8, jLabel9});

        pnlMultithreading.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Multithreading", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), java.awt.Color.white)); // NOI18N
        pnlMultithreading.setForeground(java.awt.Color.white);
        pnlMultithreading.setOpaque(false);

        lblmulti1.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        lblmulti1.setForeground(java.awt.Color.white);
        lblmulti1.setText("Number of processors : ");
        lblmulti1.setToolTipText("");

        lblNumThreads.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        lblNumThreads.setForeground(java.awt.Color.white);
        lblNumThreads.setText("Number of threads : ");
        lblNumThreads.setToolTipText("");

        threadsToUse.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        threadsToUse.setModel(new javax.swing.SpinnerNumberModel(1, 1, 40, 1));
        threadsToUse.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                threadsToUseStateChanged(evt);
            }
        });

        lblNumProcs.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        lblNumProcs.setForeground(java.awt.Color.white);
        lblNumProcs.setText("XX");
        lblNumProcs.setToolTipText("");

        javax.swing.GroupLayout pnlMultithreadingLayout = new javax.swing.GroupLayout(pnlMultithreading);
        pnlMultithreading.setLayout(pnlMultithreadingLayout);
        pnlMultithreadingLayout.setHorizontalGroup(
            pnlMultithreadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMultithreadingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMultithreadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumThreads, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblmulti1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMultithreadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(threadsToUse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumProcs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        pnlMultithreadingLayout.setVerticalGroup(
            pnlMultithreadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMultithreadingLayout.createSequentialGroup()
                .addGroup(pnlMultithreadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblmulti1)
                    .addComponent(lblNumProcs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMultithreadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(threadsToUse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumThreads)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlAlignment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlSmallRNAReporting, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlAnalysisType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlLoadSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMultithreading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlLoadSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(pnlAnalysisType, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSmallRNAReporting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(pnlAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPValue, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMultithreading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void category0ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_category0ItemStateChanged
        params.setCategory0( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_category0ItemStateChanged

    private void category1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_category1ItemStateChanged
        params.setCategory1( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_category1ItemStateChanged

    private void category2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_category2ItemStateChanged
        params.setCategory2( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_category2ItemStateChanged

    private void category3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_category3ItemStateChanged
        params.setCategory3( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_category3ItemStateChanged

    private void category4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_category4ItemStateChanged
        params.setCategory4( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_category4ItemStateChanged

    private void usingGapsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_usingGapsItemStateChanged
        params.setAllowSingleNtGap( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_usingGapsItemStateChanged

    private void useWeightedFragmentAbundanceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_useWeightedFragmentAbundanceItemStateChanged
        params.setIsWeightedFragmentAbundance( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_useWeightedFragmentAbundanceItemStateChanged

    private void shuffleSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_shuffleSpinnerStateChanged
      params.setShuffleCount( ( (Integer) shuffleSpinner.getModel().getValue() ).intValue() );
    }//GEN-LAST:event_shuffleSpinnerStateChanged

    private void pValueCutoffSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pValueCutoffSpinnerStateChanged
      params.setPvalueCutoff( ( (Double)pValueCutoffSpinner.getModel().getValue() ).doubleValue() );

    }//GEN-LAST:event_pValueCutoffSpinnerStateChanged

    private void lowComplexitySequencesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lowComplexitySequencesItemStateChanged
        params.setDiscardLowComplexitySRNAs( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_lowComplexitySequencesItemStateChanged

    private void minFragSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minFragSpinnerStateChanged
        int min = ( (Integer)minFragSpinner.getModel().getValue() ).intValue();
        int max = ( (Integer)maxFragSpinner.getModel().getValue() ).intValue();
        if(min <= max){
            params.setMinFragmentLength( min );
        }else{
            int previous = ( (Integer)minFragSpinner.getModel().getPreviousValue() ).intValue();
            minFragSpinner.setValue(previous);
            params.setMinFragmentLength( previous );
        }
    }//GEN-LAST:event_minFragSpinnerStateChanged

    private void maxFragSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxFragSpinnerStateChanged
        int min = ( (Integer)minFragSpinner.getModel().getValue() ).intValue();
        int max = ( (Integer)maxFragSpinner.getModel().getValue() ).intValue();
        if(max >= min){
            params.setMaxFragmentLength( max );
        }else{
            int next = ( (Integer) maxFragSpinner.getModel().getNextValue() ).intValue();
            maxFragSpinner.setValue(next);
            params.setMaxFragmentLength( next );
        }
    }//GEN-LAST:event_maxFragSpinnerStateChanged

    private void minSequenceLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minSequenceLengthStateChanged
        int min = ( (Integer)minSequenceLength.getModel().getValue() ).intValue();
        int max = ( (Integer)maxSequenceLength.getModel().getValue() ).intValue();
        if(min <= max){
            params.setMinSrnaLength( min );
        }else{
            int previous = ( (Integer)minSequenceLength.getModel().getPreviousValue() ).intValue();
            minSequenceLength.setValue(previous);
            params.setMinSrnaLength( previous );
        }
    }//GEN-LAST:event_minSequenceLengthStateChanged

    private void maxSequenceLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSequenceLengthStateChanged
        int min = ( (Integer)minSequenceLength.getModel().getValue() ).intValue();
        int max = ( (Integer)maxSequenceLength.getModel().getValue() ).intValue();
        if(max >= min){
            params.setMaxSrnaLength( max );
        }else{
            int next = ( (Integer)maxSequenceLength.getModel().getNextValue() ).intValue();
            maxSequenceLength.setValue(next);
            params.setMaxSrnaLength( next );
        }
    }//GEN-LAST:event_maxSequenceLengthStateChanged

    private void calculatePvaluesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_calculatePvaluesItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
          params.setCalculatePvalues( true );
          pValueCutoffSpinner.setEnabled( true );
          shuffleSpinner.setEnabled( true );
          notReportingResultsAboveCutoff.setEnabled( true );
        }else{
          params.setCalculatePvalues( false );
          pValueCutoffSpinner.setEnabled( false );
          shuffleSpinner.setEnabled( false );
          notReportingResultsAboveCutoff.setEnabled( false );
        }
    }//GEN-LAST:event_calculatePvaluesItemStateChanged

    private void notReportingResultsAboveCutoffItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_notReportingResultsAboveCutoffItemStateChanged
        params.setNotIncludePvalueGrtCutoff( (evt.getStateChange() == ItemEvent.SELECTED)  );
    }//GEN-LAST:event_notReportingResultsAboveCutoffItemStateChanged

    private void removeLowComplexFragsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_removeLowComplexFragsItemStateChanged
      params.setDiscardLowComplexityCandidates( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_removeLowComplexFragsItemStateChanged

    private void threadsToUseStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_threadsToUseStateChanged
      params.setThreadCount( (Integer)threadsToUse.getModel().getValue() );
    }//GEN-LAST:event_threadsToUseStateChanged

    private void minimumSrnaAbundanceSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minimumSrnaAbundanceSpinnerStateChanged
      params.setMinSrnaAbundance( ( (Integer) minimumSrnaAbundanceSpinner.getModel().getValue() ).intValue() );
    }//GEN-LAST:event_minimumSrnaAbundanceSpinnerStateChanged

    private void secondaryOutputCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_secondaryOutputCheckBoxItemStateChanged
      if((evt.getStateChange() == ItemEvent.SELECTED)){
        params.setSecondaryOutputToFile(true);
        subsequencesTickBox.setSelected( true );
        params.setSubsequenceSecondaryHit( true );
      }

    }//GEN-LAST:event_secondaryOutputCheckBoxItemStateChanged

    private void subsequencesTickBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subsequencesTickBoxItemStateChanged
      if( (evt.getStateChange() == ItemEvent.SELECTED) ){
        params.setSubsequenceSecondaryHit(true);
      }else{
        params.setSubsequenceSecondaryHit(false);
        secondaryOutputCheckBox.setSelected( false );
        params.setSecondaryOutputToFile( false);
      }

    }//GEN-LAST:event_subsequencesTickBoxItemStateChanged

    private void allowMismatchesAtPositionElevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowMismatchesAtPositionElevenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allowMismatchesAtPositionElevenActionPerformed

    private void allowMismatchesAtPositionElevenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allowMismatchesAtPositionElevenItemStateChanged
      params.setAllowMismatchAtPositionEleven( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_allowMismatchesAtPositionElevenItemStateChanged

    private void allowAdjacentMismatchesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allowAdjacentMismatchesItemStateChanged
      params.setAllowAdjacentMismatches( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_allowAdjacentMismatchesItemStateChanged

    private void maxAlignmentScoreSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxAlignmentScoreSpinnerStateChanged
      params.setMaxMismatches( ( (Double) maxAlignmentScoreSpinner.getModel().getValue() ).doubleValue() );
    }//GEN-LAST:event_maxAlignmentScoreSpinnerStateChanged

    private void useWeightedFragmentAbundanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useWeightedFragmentAbundanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useWeightedFragmentAbundanceActionPerformed

    private void lowComplexitySequencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowComplexitySequencesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lowComplexitySequencesActionPerformed

    private void removeTrnaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_removeTrnaItemStateChanged
        params.setDiscardTrrna( (evt.getStateChange() == ItemEvent.SELECTED) );
    }//GEN-LAST:event_removeTrnaItemStateChanged

  private void btnLowStringencyActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_btnLowStringencyActionPerformed
  {//GEN-HEADEREND:event_btnLowStringencyActionPerformed
    setThroughputDefaults( ThroughputDefaults.LOW );
  }//GEN-LAST:event_btnLowStringencyActionPerformed

  private void btnHighStringencyActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_btnHighStringencyActionPerformed
  {//GEN-HEADEREND:event_btnHighStringencyActionPerformed
    setThroughputDefaults( ThroughputDefaults.HIGH );
  }//GEN-LAST:event_btnHighStringencyActionPerformed

    /**
     * Sets all components held in this container to either
     * enabled or disabled depending on the parameter provided.
     * @param isComponentsEnabled false disables all components in this container.
     */
    protected void setAllComponentsEnabled(boolean isComponentsEnabled)
    {
        tbParams.setLoadEnabled( isComponentsEnabled ); // The 'save' button is always enabled

        calculatePvalues.setEnabled(isComponentsEnabled);
        category0.setEnabled(isComponentsEnabled);
        category1.setEnabled(isComponentsEnabled);
        category2.setEnabled(isComponentsEnabled);
        category3.setEnabled(isComponentsEnabled);
        category4.setEnabled(isComponentsEnabled);
        lowComplexitySequences.setEnabled(isComponentsEnabled);
        maxFragSpinner.setEnabled(isComponentsEnabled);
        maxSequenceLength.setEnabled(isComponentsEnabled);
        minFragSpinner.setEnabled(isComponentsEnabled);
        minSequenceLength.setEnabled(isComponentsEnabled);
        notReportingResultsAboveCutoff.setEnabled(isComponentsEnabled);
        pValueCutoffSpinner.setEnabled(isComponentsEnabled);
        shuffleSpinner.setEnabled(isComponentsEnabled);
        useWeightedFragmentAbundance.setEnabled(isComponentsEnabled);
        usingGaps.setEnabled(isComponentsEnabled);
        removeLowComplexFrags.setEnabled(isComponentsEnabled);
        minimumSrnaAbundanceSpinner.setEnabled(isComponentsEnabled);
        threadsToUse.setEnabled(isComponentsEnabled);
        secondaryOutputCheckBox.setEnabled(isComponentsEnabled);
        subsequencesTickBox.setEnabled(isComponentsEnabled);
        allowAdjacentMismatches.setEnabled(isComponentsEnabled);
        allowMismatchesAtPositionEleven.setEnabled(isComponentsEnabled);
        btnHighStringency.setEnabled(isComponentsEnabled );
        btnLowStringency.setEnabled(isComponentsEnabled );
        maxAlignmentScoreSpinner.setEnabled(isComponentsEnabled );
        removeTrna.setEnabled(isComponentsEnabled );
    }

    private enum ThroughputDefaults
    {
      LOW
      {
        @Override double getMaxMismatches() { return 4.5; }
        @Override boolean getAllowAdjacentMismatches() { return true; }
        @Override boolean getAllowMismatchAt11() { return true; }
        @Override boolean wantCategory4() { return true; }
        @Override int getMinSrnaAbundance() { return 1; }
      },
      HIGH
      {
        @Override double getMaxMismatches() { return 4; }
        @Override boolean getAllowAdjacentMismatches() { return false; }
        @Override boolean getAllowMismatchAt11() { return false; }
        @Override boolean wantCategory4() { return false; }
        @Override int getMinSrnaAbundance() { return 5; }
      };

      abstract double getMaxMismatches();
      abstract boolean getAllowAdjacentMismatches();
      abstract boolean getAllowMismatchAt11();
      abstract boolean wantCategory4();
      abstract int getMinSrnaAbundance();
    }

    private void setThroughputDefaults( ThroughputDefaults def )
    {
       params.setMaxMismatches( def.getMaxMismatches() );
       maxAlignmentScoreSpinner.getModel().setValue( def.getMaxMismatches() );

       params.setAllowAdjacentMismatches( def.getAllowAdjacentMismatches() );
       allowAdjacentMismatches.setSelected( def.getAllowAdjacentMismatches() );

       params.setAllowMismatchAtPositionEleven( def.getAllowMismatchAt11() );
       allowMismatchesAtPositionEleven.setSelected( def.getAllowMismatchAt11() );

       params.setCategory4( def.wantCategory4() );
       category4.setSelected( def.wantCategory4() );

       params.setMinSrnaAbundance( def.getMinSrnaAbundance() );
       minimumSrnaAbundanceSpinner.getModel().setValue( def.getMinSrnaAbundance() );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowAdjacentMismatches;
    private javax.swing.JCheckBox allowMismatchesAtPositionEleven;
    private javax.swing.JButton btnHighStringency;
    private javax.swing.JButton btnLowStringency;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox calculatePvalues;
    private javax.swing.JCheckBox category0;
    private javax.swing.JCheckBox category1;
    private javax.swing.JCheckBox category2;
    private javax.swing.JCheckBox category3;
    private javax.swing.JCheckBox category4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel lblNumProcs;
    private javax.swing.JLabel lblNumThreads;
    private javax.swing.JLabel lblmulti1;
    private javax.swing.JCheckBox lowComplexitySequences;
    private javax.swing.JSpinner maxAlignmentScoreSpinner;
    private javax.swing.JSpinner maxFragSpinner;
    private javax.swing.JSpinner maxSequenceLength;
    private javax.swing.JSpinner minFragSpinner;
    private javax.swing.JSpinner minSequenceLength;
    private javax.swing.JSpinner minimumSrnaAbundanceSpinner;
    private javax.swing.JCheckBox notReportingResultsAboveCutoff;
    private javax.swing.JSpinner pValueCutoffSpinner;
    private javax.swing.JPanel pnlAlignment;
    private javax.swing.JPanel pnlAnalysisType;
    private javax.swing.JPanel pnlCategory;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlLoadSave;
    private javax.swing.JPanel pnlMultithreading;
    private javax.swing.JPanel pnlPValue;
    private javax.swing.JPanel pnlSmallRNAReporting;
    private javax.swing.JCheckBox removeLowComplexFrags;
    private javax.swing.JCheckBox removeTrna;
    private javax.swing.JCheckBox secondaryOutputCheckBox;
    private javax.swing.JSpinner shuffleSpinner;
    private javax.swing.JCheckBox subsequencesTickBox;
    private uk.ac.uea.cmp.srnaworkbench.swing.ParamsToolBar tbParams;
    private javax.swing.JSpinner threadsToUse;
    private javax.swing.JCheckBox useWeightedFragmentAbundance;
    private javax.swing.JCheckBox usingGaps;
    // End of variables declaration//GEN-END:variables

    // Start of ToolParamsHost implementation
    //
    @Override
    public ToolParameters getParams()
    {
        return params;
    }

    @Override
    public void update( ToolParameters params )
    {
      if ( !( params instanceof ParesnipParams ) )
      {
        showErrorDialog("Unexpected error: The parameter set is not valid for PAREsnip");
        return;
      }

      // The passed-in params is the same as the instance 'params' so ignore it...

      displayParameters();
    }

    @Override
    public void showErrorDialog( String message )
    {
      JOptionPane.showMessageDialog( this,
        message,
        "PAREsnip Parameter Error",
        JOptionPane.ERROR_MESSAGE );
    }
    //
    // End of ToolParamsHost implementation

    private void displayParameters()
    {
      // Small RNA Reporting

      minimumSrnaAbundanceSpinner.setValue( params.getMinSrnaAbundance() );
      subsequencesTickBox.setSelected( params.isSubsequenceSecondaryHit() );
      secondaryOutputCheckBox.setSelected( params.isSecondaryOutputToFile() );

      // Categories

      useWeightedFragmentAbundance.setSelected( params.isWeightedFragmentAbundance() );
      category0.setSelected( params.isCategory0() );
      category1.setSelected( params.isCategory1() );
      category2.setSelected( params.isCategory2() );
      category3.setSelected( params.isCategory3() );
      category4.setSelected( params.isCategory4() );


      // Filter

      removeTrna.setSelected( params.isDiscardTrrna() );
      removeLowComplexFrags.setSelected( params.isDiscardLowComplexityCandidates() );
      lowComplexitySequences.setSelected( params.isDiscardLowComplexitySRNAs() );

      minFragSpinner.setValue( params.getMinFragmentLength() );
      maxFragSpinner.setValue( params.getMaxFragmentLength() );

      minSequenceLength.setValue( params.getMinSrnaLength() );
      maxSequenceLength.setValue( params.getMaxSrnaLength() );

      // Alignment

      usingGaps.setSelected( params.isAllowSingleNtGap() );
      allowMismatchesAtPositionEleven.setSelected( params.isAllowMismatchAtPositionEleven() );
      allowAdjacentMismatches.setSelected( params.isAllowAdjacentMismatches() );
      maxAlignmentScoreSpinner.setValue( params.getMaxMismatches() );

      // P-Value

      calculatePvalues.setSelected( params.isCalculatePvalues() );
      shuffleSpinner.setValue( params.getShuffleCount() );
      pValueCutoffSpinner.setValue( params.getPvalueCutoff() );
      notReportingResultsAboveCutoff.setSelected( params.isNotIncludePvalueGrtCutoff() );

      // MultiThreading

      threadsToUse.setValue( params.getThreadCount() );
  }
}
