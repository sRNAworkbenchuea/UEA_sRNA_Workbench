
package uk.ac.uea.cmp.srnaworkbench.viewers;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.geom.Ellipse2D;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.Range;
import org.jfree.data.Value;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.Layer;
import uk.ac.uea.cmp.srnaworkbench.GUIInterface;
import uk.ac.uea.cmp.srnaworkbench.tools.qualitycheck.ma.MAList;
import uk.ac.uea.cmp.srnaworkbench.tools.qualitycheck.ma.MAelement;

/**
 *
 * @author Matt
 */
public class MAplotViewer extends javax.swing.JInternalFrame implements GUIInterface
{
  XYSeriesCollection maData;
  MAplot maplot = new MAplot();

  /**
   * Creates new form MAplot
   */
  public MAplotViewer()
  {
    initComponents();
    maData = new XYSeriesCollection();
  }

  private JFreeChart createScatterChart( XYSeriesCollection xyData )
  {
    JFreeChart maChart = ChartFactory.createScatterPlot( "MA", "X", "Y",
      xyData, PlotOrientation.HORIZONTAL, true, true, false );
    maChart.getXYPlot().setForegroundAlpha( 0.75f );
    XYPlot plot = (XYPlot) maChart.getPlot();
    plot.getRenderer().setSeriesShape(0, new Ellipse2D.Double(-1, -1, 2, 2));
    this.highlightArea( 0.3, -9, plot);
    return ( maChart );
  }

  public void inputData( MAList maList )
  {
    maplot.inputData( maList );
  }

  public void initialiseMAplot()
  {
    /*    JFreeChart maChart = createScatterChart( this.maData );
     * XYPlot xyPlot = (XYPlot) maChart.getPlot();
     * maChart.setBackgroundPaint( Color.white );
     * xyPlot.setBackgroundPaint( Color.white );
     * ChartPanel chartPanel = new ChartPanel( maChart );
     * chartPanel.setPreferredSize( new java.awt.Dimension( 500, 400 ) );*/
    ChartPanel maPanel = maplot.getChartPanel();
    this.setContentPane( maPanel );

  }

  public void highlightArea(double m, double a, XYPlot plot)
  {
    Range mRange = plot.getDataRange( plot.getDomainAxis() );
    Range aRange = plot.getDataRange( plot.getRangeAxis() );
    IntervalMarker mI = new IntervalMarker(m,mRange.getUpperBound() - m);
    IntervalMarker aI = new IntervalMarker(a, aRange.getUpperBound() - a);
    plot.addDomainMarker( mI, Layer.BACKGROUND );
    plot.addRangeMarker( aI, Layer.BACKGROUND );
  }
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 394, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 278, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables

  @Override
  public void runProcedure()
  {
  }

  @Override
  public JPanel getParamsPanel()
  {
    throw new UnsupportedOperationException( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
  }

  @Override
  public void setShowingParams( boolean newState )
  {
    throw new UnsupportedOperationException( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
  }

  @Override
  public boolean getShowingParams()
  {
    throw new UnsupportedOperationException( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
  }

  @Override
  public void shutdown()
  {
    throw new UnsupportedOperationException( "Not supported yet." ); //To change body of generated methods, choose Tools | Templates.
  }

  public static void main( String args[] )
  {
    EventQueue.invokeLater( new Runnable()
    {
      @Override
      public void run()
      {
        File refSample = new File( "C:\\gitrepos\\Workbench\\TutorialData\\FASTA\\RNAOME\\Sample2\\118373.fa" );
        File obsSample = new File( "C:\\gitrepos\\Workbench\\TutorialData\\FASTA\\RNAOME\\Sample2\\118374.fa" );
        MAList maList;
        try
        {
          maList = new MAList( refSample, obsSample, 2, 0 );

          JFrame frame = new JFrame();
          frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE);
          JDesktopPane desktop = new JDesktopPane();
          frame.setContentPane( desktop );

          MAplotViewer ma = new MAplotViewer();
          ma.inputData( maList );
          ma.initialiseMAplot();
          

          //ma.createScatterChart(ViewerUtils.createTestSeriesDataset());
          //ma.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
          ma.pack();
          //ma.setLocationRelativeTo(null);
          ma.setVisible( true );
          desktop.add( ma );
          desktop.setVisible( true );

          //Make the big window be indented 50 pixels from each edge
          //of the screen.
          int inset = 50;
          Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
          frame.setBounds( inset, inset,
            screenSize.width - inset * 2,
            screenSize.height - inset * 2 );
          frame.setVisible( true );
        }
        catch ( IOException e )
        {
          e.printStackTrace();
        }
      }
    } );
  }
}
