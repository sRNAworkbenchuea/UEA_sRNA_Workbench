/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package uk.ac.uea.cmp.srnaworkbench.tools.filemanagerFX;

import java.beans.PropertyVetoException;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import uk.ac.uea.cmp.srnaworkbench.GUIInterface;
import uk.ac.uea.cmp.srnaworkbench.MDIDesktopPane;
import uk.ac.uea.cmp.srnaworkbench.database.WF.DatabaseWorkflowModule;
import uk.ac.uea.cmp.srnaworkbench.tools.ToolManager;
import uk.ac.uea.cmp.srnaworkbench.utils.AppUtils;
import static uk.ac.uea.cmp.srnaworkbench.utils.LOGGERS.WorkbenchLogger.LOGGER;

/**
 *
 * @author w0445959
 */
public class FileHierarchyViewer extends javax.swing.JInternalFrame implements GUIInterface
{

    private static Scene scene;
    
    private static Parent root;
    
    private static FileHierarchyViewController controller;

    

    
    /**
     * Creates new form FileHierarchyViewer
     */
    public FileHierarchyViewer()
    {
        

        // This method is invoked on the EDT thread
        initComponents();

        final JFXPanel fxPanel = new JFXPanel();
        this.mainScrollPane.setViewportView(fxPanel);
        Platform.runLater(() ->
        {
            initFX(fxPanel);
        });
    }
    
    private void initFX(JFXPanel fxPanel) {
        // This method is invoked on the JavaFX thread
        createScene();
        fxPanel.setScene(scene);
    }

    private void createScene() 
    {
        try
        {
            //Parent root = FXMLLoader.load(FileHierarchyViewer.class.getResource("/fxml/FileHierarchyView.fxml"));
            FXMLLoader loader = new FXMLLoader(FileHierarchyViewer.class.getResource("/fxml/FileHierarchyView.fxml"));
            root = loader.load();
            scene = new Scene(root);
            scene.getStylesheets().add("/styles/Styles.css");

            controller = (FileHierarchyViewController)loader.getController();
            controller.setStageAndSetupListeners(scene);
        }
        catch (IOException ex)
        {
            LOGGER.log(Level.SEVERE, null, ex);
        }

    }
    
    public static void main(String[] args)
    {
        
        SwingUtilities.invokeLater(() ->
        {
            initAndShowGUI();
        });
    }
    
    private static void initAndShowGUI() {
        

        FileHierarchyViewer frame = new FileHierarchyViewer();
        frame.setVisible(true);
    }
    
    public static Map<String, List<Path>> getFiles()
    {
        return FileHierarchyViewController.retrieveDataPaths();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mainScrollPane = new javax.swing.JScrollPane();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                closingForm(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                resizeWindow(evt);
            }
        });
        getContentPane().add(mainScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resizeWindow(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_resizeWindow
    {//GEN-HEADEREND:event_resizeWindow
        //System.out.println("resize");
    }//GEN-LAST:event_resizeWindow

    private void closingForm(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_closingForm
    {//GEN-HEADEREND:event_closingForm
  
        if (!DatabaseWorkflowModule.getInstance().getSetup())
        {
            int n = JOptionPane.showConfirmDialog(
                    this,
                    "The Database is not configured, would you still like to close?",
                    "Workbench Database Setup",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (n == JOptionPane.YES_OPTION)
            {

                this.setVisible(false);

            }
        }
        else
        {
            this.setVisible(false);
        }

    }//GEN-LAST:event_closingForm


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void runProcedure()
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JPanel getParamsPanel()
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setShowingParams(boolean newState)
    {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean getShowingParams()
    {
        return false;
    }

    @Override
    public void shutdown()
    {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String toString()
    {
        return "FileHierarchyView";
    }
    
    public static FileHierarchyViewer getOrCreateViewer()
    {
        if(ToolManager.getInstance().getTool("FileHierarchyView") == null)
        {
            final FileHierarchyViewer viewer = new FileHierarchyViewer();
            MDIDesktopPane pane = AppUtils.INSTANCE.getMDIDesktopPane();

            if (pane != null)
            {
                pane.add(viewer);
            }

            ToolManager.getInstance().addTool(viewer);

            
            try
            {
                viewer.setMaximum(true);
            }
            catch (PropertyVetoException ex)
            {
                LOGGER.log(Level.SEVERE, ex.getMessage());
            }
            return viewer;
            
        }
        else
        {
            return ((FileHierarchyViewer)ToolManager.getInstance().getTool("FileHierarchyView"));
        }
        

    }
    public static Parent getRoot()
    {
        if(ToolManager.getInstance().getTool("FileHierarchyView") == null)
        {
            final FileHierarchyViewer viewer = new FileHierarchyViewer();
            MDIDesktopPane pane = AppUtils.INSTANCE.getMDIDesktopPane();

            if (pane != null)
            {
                pane.add(viewer);
            }

            ToolManager.getInstance().addTool(viewer);

            
            try
            {
                viewer.setMaximum(true);
            }
            catch (PropertyVetoException ex)
            {
                LOGGER.log(Level.SEVERE, ex.getMessage());
            }
            return viewer.root;
            
        }
        else
        {
            return ((FileHierarchyViewer)ToolManager.getInstance().getTool("FileHierarchyView")).root;
        }
        

    }
}
